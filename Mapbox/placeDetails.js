document.addEventListener('DOMContentLoaded', async () => {
    const content = document.getElementById('content');
    const closeBtn = document.getElementById('closeBtn');

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
    closeBtn.addEventListener('click', () => {
        window.location.href = '../index.html';
    });

    try {
        const isLucky = sessionStorage.getItem('isLucky') === 'true';

        if (isLucky) {
            // –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–∂–∏–º "–ú–Ω–µ –ø–æ–≤–µ–∑—ë—Ç", –∏—â–µ–º –±–ª–∏–∂–∞–π—à–µ–µ –º–µ—Å—Ç–æ
            const userLocation = JSON.parse(sessionStorage.getItem('userLocation'));
            if (!userLocation) {
                showError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ");
                return;
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            const db = new PlacesDatabase();
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Å—Ç–∞
            const places = await db.searchPlaces(userLocation.latitude, userLocation.longitude);
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –º–µ—Å—Ç–∞ –≤ —Ä–∞–¥–∏—É—Å–µ 5 –∫–º
            const nearbyPlaces = places.filter(place => {
                if (!place.location || !place.location.coordinates) return false;
                const [placeLon, placeLat] = place.location.coordinates;
                const distance = calculateDistance(userLocation.latitude, userLocation.longitude, placeLat, placeLon);
                return distance <= 5000; // 5 –∫–º = 5000 –º–µ—Ç—Ä–æ–≤
            });

            if (nearbyPlaces.length === 0) {
                showError("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–µ—Å—Ç üòû");
                return;
            }

            // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –º–µ—Å—Ç–æ –∏–∑ –±–ª–∏–∂–∞–π—à–∏—Ö
            const randomIndex = Math.floor(Math.random() * nearbyPlaces.length);
            const luckyPlace = nearbyPlaces[randomIndex];
            
            displayPlace(luckyPlace);

            // –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥–∏ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            sessionStorage.removeItem('isLucky');
            sessionStorage.removeItem('userLocation');
        } else {
            // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ
            const places = JSON.parse(sessionStorage.getItem('places') || '[]');
            const placeId = new URLSearchParams(window.location.search).get('id');
            console.log('Searching for place with ID:', placeId);
            console.log('Available places:', places);
            
            const place = places.find(p => p.id === placeId);
            console.log('Found place:', place);
            
            if (place) {
                displayPlace(place);
            } else {
                showError("–ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
            }
        }
    } catch (error) {
        showError("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö");
        console.error('Error in placeDetails:', error);
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏
function calculateDistance(lat1, lon1, lat2, lon2) {
    const R = 6371e3; // Earth's radius in meters
    const œÜ1 = lat1 * Math.PI/180;
    const œÜ2 = lat2 * Math.PI/180;
    const ŒîœÜ = (lat2-lat1) * Math.PI/180;
    const ŒîŒª = (lon2-lon1) * Math.PI/180;

    const a = Math.sin(ŒîœÜ/2) * Math.sin(ŒîœÜ/2) +
            Math.cos(œÜ1) * Math.cos(œÜ2) *
            Math.sin(ŒîŒª/2) * Math.sin(ŒîŒª/2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));

    return Math.round(R * c); // Distance in meters
}

function displayPlace(place) {
    console.log('Displaying place:', place);
    const content = document.getElementById('content');
    
    // Create photo HTML if placePhotos exists
    let photoHtml = '';
    if (place.placePhotos) {
        console.log('Place has photo:', place.placePhotos);
        // Use the URL directly from placePhotos since it's already a complete URL
        const photoUrl = place.placePhotos;
        console.log('Using photo URL:', photoUrl);
        photoHtml = `
            <div class="place-photo">
                <img src="${photoUrl}" alt="${place.name}" onerror="console.error('Failed to load image:', this.src)" />
            </div>
        `;
    } else {
        console.log('No photo available for place');
    }

    content.innerHTML = `
        <div class="place-details">
            <h2>${place.name}</h2>
            <div class="place-type">${place.type}</div>
            ${place.vibe ? `<div class="place-vibe">${place.vibe}</div>` : ''}
            <div class="place-distance">${Math.round(place.distance)} –º</div>
            <div class="place-address">${place.address || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}</div>
            ${place.revew ? `<div class="place-description">${place.revew}</div>` : ''}
            ${photoHtml}
        </div>
    `;
    
    // Log the final HTML structure
    console.log('Generated HTML structure:', content.innerHTML);
}

function showError(message) {
    const content = document.getElementById('content');
    content.innerHTML = `
        <div class="error">
            ${message}
        </div>
    `;
} 