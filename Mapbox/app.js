class FoodFinder {
    constructor() {
        console.log('Initializing FoodFinder...');
        this.map = null;
        this.userMarker = null;
        this.placeMarkers = [];
        this.allPlaces = [];
        this.selectedVibe = null;
        this.watchId = null;
        this.currentPosition = null;
        
        // –ú–∞–ø–ø–∏–Ω–≥ –≤–∞–π–±–æ–≤ –Ω–∞ —ç–º–æ–¥–∂–∏
        this.vibeEmojis = {
            '—Ç—É—Å–æ–≤—ã–π': 'üéâ',
            '—Å–µ–º–µ–π–Ω—ã–π': 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶',
            '—Ö–∏–ø—Å—Ç–µ—Ä—Å–∫–∏–π': 'üì∏',
            '–ª–æ–∫–∞–ª—å–Ω—ã–π': '‚òÇÔ∏è',
            '–¥–æ–º–∞—à–Ω–∏–π': 'üß∂',
            '—Ä–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π': 'üíò',
            '–ø–∞–Ω–∫': 'üé∏',
            '—Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π': 'ü•§',
            '–ª–∞–∫—à–µ—Ä–∏': 'üí∞',
            '—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π': 'üéí'
        };
        
        try {
            console.log('Creating PlacesDatabase instance...');
            this.db = new PlacesDatabase();
            console.log('PlacesDatabase created successfully');
        } catch (error) {
            console.error('Error creating PlacesDatabase:', error);
            throw error;
        }
        
        this.initializeEventListeners();
    }

    async getCurrentPosition() {
        console.log('getCurrentPosition called');

        // –ï—Å–ª–∏ —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è –∏ watchId, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
        if (this.currentPosition && this.watchId) {
            console.log('Using cached position');
            return this.currentPosition;
        }

        return new Promise((resolve, reject) => {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –æ–¥–∏–Ω —Ä–∞–∑
            navigator.geolocation.getCurrentPosition(
                position => {
                    console.log('Initial position received');
                    this.currentPosition = position;
                    
                    // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏, –Ω–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    this.watchId = navigator.geolocation.watchPosition(
                        newPosition => {
                            console.log('Position updated');
                            this.currentPosition = newPosition;
                        },
                        error => {
                            console.error('Watch position error:', error);
                        },
                        { enableHighAccuracy: true }
                    );
                    
                    resolve(position);
                },
                error => {
                    console.error('getCurrentPosition error:', error);
                    reject(error);
                },
                { enableHighAccuracy: true, timeout: 5000, maximumAge: 0 }
            );
        });
    }

    initializeEventListeners() {
        document.getElementById('findPlacesBtn').addEventListener('click', () => this.findPlaces());
        document.getElementById('findByVibeBtn').addEventListener('click', () => this.showVibeButtons());
        document.getElementById('luckyBtn').addEventListener('click', () => this.findLuckyPlace());
        document.getElementById('clearCacheBtn').addEventListener('click', (e) => {
            e.preventDefault();
            this.db.clearCache();
            window.location.reload();
        });
    }

    async findPlaces() {
        console.log('findPlaces called');
        if (!navigator.geolocation) {
            console.error('Geolocation not supported');
            this.showError("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º");
            return;
        }

        // –°–∫—Ä—ã–≤–∞–µ–º –≤–∞–π–±—ã –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç–∫—Ä—ã—Ç—ã
        const vibeButtonsContainer = document.getElementById('vibeButtons');
        const findByVibeBtn = document.getElementById('findByVibeBtn');
        if (vibeButtonsContainer.style.display === 'grid') {
            vibeButtonsContainer.style.display = 'none';
            findByVibeBtn.textContent = '–ü–æ –≤–∞–π–±—É';
        }

        this.showLoading();
        console.log('Getting current position...');

        try {
            const position = await this.getCurrentPosition();
            const { latitude, longitude } = position.coords;
            console.log('Got position:', { latitude, longitude });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            this.userLocation = { latitude, longitude };
            sessionStorage.setItem('userLocation', JSON.stringify(this.userLocation));
            
            this.initializeOrUpdateMap(latitude, longitude);
            console.log('Map initialized/updated');
            
            console.log('Starting places search...');
            await this.searchPlaces();
        } catch (error) {
            console.error('Error in findPlaces:', error);
            await this.handleGeolocationError(error);
        }
    }

    async findLuckyPlace() {
        if (!navigator.geolocation) {
            this.showError("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º");
            return;
        }

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            if (this.geolocationPermission === 'denied') {
                this.showError('–î–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞.');
                return;
            }

            const position = await this.getCurrentPosition();
            const { latitude, longitude } = position.coords;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ —Ñ–ª–∞–≥
            sessionStorage.setItem('userLocation', JSON.stringify({ latitude, longitude }));
            sessionStorage.setItem('isLucky', 'true');

            // –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–µ—Ç–∞–ª–µ–π
            window.location.href = 'Mapbox/placeDetails.html';
        } catch (error) {
            console.error('Error in findLuckyPlace:', error);
            await this.handleGeolocationError(error);
        }
    }

    showVibeButtons() {
        const vibeButtonsContainer = document.getElementById('vibeButtons');
        const findByVibeBtn = document.getElementById('findByVibeBtn');
        
        if (vibeButtonsContainer.style.display === 'grid') {
            vibeButtonsContainer.style.display = 'none';
            findByVibeBtn.textContent = '–ü–æ –≤–∞–π–±—É';
        } else {
            this.loadAndShowVibeButtons();
            vibeButtonsContainer.style.display = 'grid';
            findByVibeBtn.textContent = '–°–∫—Ä—ã—Ç—å –≤–∞–π–±—ã';
        }
    }

    async loadAndShowVibeButtons() {
        try {
            const vibes = await this.db.getUniqueVibes();
            const vibeButtonsContainer = document.getElementById('vibeButtons');
            const resultsContainer = document.getElementById('results');
            const mapContainer = document.getElementById('map-container');
            
            if (vibes.length === 0) {
                this.showError("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–π–±–æ–≤");
                return;
            }

            // –°–∫—Ä—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –∫–∞—Ä—Ç—É
            resultsContainer.innerHTML = '';
            if (this.map) {
                this.map.remove();
                this.map = null;
            }
            const mapElement = document.getElementById('map');
            if (mapElement) {
                mapElement.style.display = 'none';
            }
            this.clearPlaceMarkers();

            // Create buttons for each vibe with emojis only
            const buttons = vibes.map(vibe => {
                const emoji = this.vibeEmojis[vibe.toLowerCase()] || vibe;
                return `
                    <button class="vibe-button" data-vibe="${vibe}" title="${vibe}">
                        ${emoji}
                    </button>
                `;
            }).join('');

            vibeButtonsContainer.innerHTML = buttons;

            // Add click handlers
            document.querySelectorAll('.vibe-button').forEach(button => {
                button.addEventListener('click', async () => {
                    const vibe = button.dataset.vibe;
                    this.selectedVibe = vibe;
                    
                    // Update active state
                    document.querySelectorAll('.vibe-button').forEach(btn => {
                        btn.classList.remove('active');
                    });
                    button.classList.add('active');

                    // Show loading state
                    this.showLoading();

                    // Get current position and search places
                    try {
                        const position = await this.getCurrentPosition();
                        const { latitude, longitude } = position.coords;
                        this.initializeOrUpdateMap(latitude, longitude);
                        await this.searchPlacesByVibe(vibe, latitude, longitude);
                        
                        // Scroll to results
                        document.getElementById('results').scrollIntoView({ 
                            behavior: 'smooth', 
                            block: 'start' 
                        });
                    } catch (error) {
                        console.error('Error in vibe button click:', error);
                        await this.handleGeolocationError(error);
                    }
                });
            });
        } catch (error) {
            this.showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞–π–±–æ–≤");
            console.error(error);
        }
    }

    async searchPlacesByVibe(vibe, latitude, longitude) {
        try {
            if (!vibe) {
                console.error('Vibe parameter is required');
                this.showError('–ù–µ —É–∫–∞–∑–∞–Ω —Ç–∏–ø –≤–∞–π–±–∞');
                return;
            }

            console.log('Searching places by vibe:', vibe);
            const places = await this.db.searchPlacesByVibe(vibe, latitude, longitude);
            
            if (!places || !Array.isArray(places)) {
                console.error('Invalid places data received:', places);
                this.showError('–ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Å—Ç–∞—Ö');
                return;
            }

            this.allPlaces = places;
            const resultsDiv = document.getElementById('results');
            let html = `<h3>–ú–µ—Å—Ç–∞ —Å –≤–∞–π–±–æ–º "${vibe}":</h3>`;
            html += places.map((place, index) => this.createPlaceHtml(place, index)).join('');
            resultsDiv.innerHTML = html;
            this.addPlaceMarkers(places);
            this.addPlaceClickHandlers();
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Å—Ç–∞ –≤ sessionStorage
            sessionStorage.setItem('places', JSON.stringify(places));
        } catch (error) {
            console.error('Error searching places by vibe:', error);
            this.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–µ—Å—Ç: ' + (error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
        }
    }

    async searchPlaces() {
        try {
            if (!this.userLocation) {
                throw new Error('User location is not available');
            }

            console.log('Searching places with user location:', this.userLocation);
            const places = await this.db.searchPlaces(
                this.userLocation.latitude,
                this.userLocation.longitude
            );

            if (!places || places.length === 0) {
                this.showError("–ú–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏");
                return;
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –º–µ—Å—Ç–∞
            this.allPlaces = places;
            
            // –†–∞–∑–¥–µ–ª—è–µ–º –º–µ—Å—Ç–∞ –Ω–∞ –±–ª–∏–∂–Ω–∏–µ –∏ –¥–∞–ª—å–Ω–∏–µ
            const nearbyPlaces = places.filter(place => {
                if (!place.location || !place.location.coordinates) return false;
                const [placeLon, placeLat] = place.location.coordinates;
                const distance = this.calculateDistance(
                    this.userLocation.latitude,
                    this.userLocation.longitude,
                    placeLat,
                    placeLon
                );
                place.distance = distance; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –æ–±—ä–µ–∫—Ç–µ –º–µ—Å—Ç–∞
                return distance <= 1000;
            });

            const farPlaces = places.filter(place => {
                if (!place.location || !place.location.coordinates) return false;
                const [placeLon, placeLat] = place.location.coordinates;
                const distance = this.calculateDistance(
                    this.userLocation.latitude,
                    this.userLocation.longitude,
                    placeLat,
                    placeLon
                );
                place.distance = distance; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –æ–±—ä–µ–∫—Ç–µ –º–µ—Å—Ç–∞
                return distance > 1000;
            });

            console.log('Places divided:', {
                total: places.length,
                nearby: nearbyPlaces.length,
                far: farPlaces.length
            });

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –º–µ—Å—Ç–∞ –≤ sessionStorage –¥–ª—è placeDetails
            sessionStorage.setItem('places', JSON.stringify(places));

            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —É—á–µ—Ç–æ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
            this.displayResultsByDistance(nearbyPlaces, farPlaces);
        } catch (error) {
            console.error('Error searching places:', error);
            this.showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–µ—Å—Ç: " + error.message);
        }
    }

    displayResultsByDistance(nearbyPlaces, farPlaces) {
        const resultsDiv = document.getElementById('results');
        
        if (nearbyPlaces.length === 0 && farPlaces.length === 0) {
            resultsDiv.innerHTML = "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–µ—Å—Ç –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ –Ω–µ—Ç";
            return;
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞–π–±–∞
        const vibeText = this.selectedVibe ? 
            `${this.selectedVibe} –º–µ—Å—Ç–∞` : 
            '–º–µ—Å—Ç–∞';
        let html = `<h3>–ù–∞–π–¥–µ–Ω–Ω—ã–µ ${vibeText} –≤ —Ä–∞–¥–∏—É—Å–µ 1–∫–º:</h3>`;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –±–ª–∏–∂–Ω–∏—Ö –º–µ—Å—Ç–∞
        const visibleNearbyPlaces = nearbyPlaces.slice(0, 3);
        const hasMoreNearbyPlaces = nearbyPlaces.length > 3;
        
        if (visibleNearbyPlaces.length > 0) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ this.allPlaces
            html += visibleNearbyPlaces.map(place => {
                const originalIndex = this.allPlaces.findIndex(p => p.id === place.id);
                return this.createPlaceHtml(place, originalIndex);
            }).join('');

            // –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –±–ª–∏–∂–Ω–∏–µ –º–µ—Å—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ"
            if (hasMoreNearbyPlaces) {
                html += `
                    <button id="showAllNearbyBtn" class="show-all-btn">
                        –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ (${nearbyPlaces.length})
                    </button>
                    <div id="allNearbyPlaces" style="display: none;">
                        ${nearbyPlaces.slice(3).map(place => {
                            const originalIndex = this.allPlaces.findIndex(p => p.id === place.id);
                            return this.createPlaceHtml(place, originalIndex);
                        }).join('')}
                    </div>
                `;
            }

            // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–ª—å–Ω–∏–µ –º–µ—Å—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ê —á—Ç–æ –µ—Å—Ç—å –¥–∞–ª—å—à–µ?"
            if (farPlaces.length > 0) {
                html += `
                    <button id="showFarPlacesBtn" class="show-all-btn">
                        –ê —á—Ç–æ –µ—Å—Ç—å –¥–∞–ª—å—à–µ? (${farPlaces.length})
                    </button>
                    <div id="farPlaces" style="display: none;">
                        ${farPlaces.map(place => {
                            const originalIndex = this.allPlaces.findIndex(p => p.id === place.id);
                            return this.createPlaceHtml(place, originalIndex);
                        }).join('')}
                    </div>
                `;
            }
        } else if (farPlaces.length > 0) {
            // –ï—Å–ª–∏ –Ω–µ—Ç –±–ª–∏–∂–Ω–∏—Ö –º–µ—Å—Ç, –Ω–æ –µ—Å—Ç—å –¥–∞–ª—å–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ê —á—Ç–æ –µ—Å—Ç—å –¥–∞–ª—å—à–µ?"
            html += `
                <div class="no-nearby-places">
                    –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–µ—Å—Ç –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ –Ω–µ—Ç
                </div>
                <button id="showFarPlacesBtn" class="show-all-btn">
                    –ê —á—Ç–æ –µ—Å—Ç—å –¥–∞–ª—å—à–µ? (${farPlaces.length})
                </button>
                <div id="farPlaces" style="display: none;">
                    ${farPlaces.map(place => {
                        const originalIndex = this.allPlaces.findIndex(p => p.id === place.id);
                        return this.createPlaceHtml(place, originalIndex);
                    }).join('')}
                </div>
            `;
        }

        resultsDiv.innerHTML = html;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –≤–∏–¥–∏–º—ã—Ö –±–ª–∏–∂–Ω–∏—Ö –º–µ—Å—Ç
        if (visibleNearbyPlaces.length > 0) {
            this.addPlaceMarkers(visibleNearbyPlaces);
        }
        this.addPlaceClickHandlers();

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ"
        if (hasMoreNearbyPlaces) {
            const showAllNearbyBtn = document.getElementById('showAllNearbyBtn');
            const allNearbyPlacesDiv = document.getElementById('allNearbyPlaces');
            
            showAllNearbyBtn.addEventListener('click', () => {
                if (allNearbyPlacesDiv.style.display === 'none') {
                    allNearbyPlacesDiv.style.display = 'block';
                    showAllNearbyBtn.textContent = '–°–∫—Ä—ã—Ç—å';
                    // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –≤—Å–µ—Ö –±–ª–∏–∂–Ω–∏—Ö –º–µ—Å—Ç
                    this.addPlaceMarkers(nearbyPlaces);
                } else {
                    allNearbyPlacesDiv.style.display = 'none';
                    showAllNearbyBtn.textContent = `–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ (${nearbyPlaces.length})`;
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 –º–µ—Å—Ç
                    this.clearPlaceMarkers();
                    this.addPlaceMarkers(visibleNearbyPlaces);
                }
            });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ê —á—Ç–æ –µ—Å—Ç—å –¥–∞–ª—å—à–µ?"
        if (farPlaces.length > 0) {
            const showFarPlacesBtn = document.getElementById('showFarPlacesBtn');
            const farPlacesDiv = document.getElementById('farPlaces');
            
            showFarPlacesBtn.addEventListener('click', () => {
                if (farPlacesDiv.style.display === 'none') {
                    farPlacesDiv.style.display = 'block';
                    showFarPlacesBtn.textContent = '–°–∫—Ä—ã—Ç—å –¥–∞–ª—å–Ω–∏–µ –º–µ—Å—Ç–∞';
                    // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –¥–∞–ª—å–Ω–∏—Ö –º–µ—Å—Ç
                    this.addPlaceMarkers(farPlaces);
                } else {
                    farPlacesDiv.style.display = 'none';
                    showFarPlacesBtn.textContent = `–ê —á—Ç–æ –µ—Å—Ç—å –¥–∞–ª—å—à–µ? (${farPlaces.length})`;
                    // –£–¥–∞–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–∞–ª—å–Ω–∏—Ö –º–µ—Å—Ç
                    this.clearPlaceMarkers();
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –≤–∏–¥–∏–º—ã—Ö –±–ª–∏–∂–Ω–∏—Ö –º–µ—Å—Ç
                    if (visibleNearbyPlaces.length > 0) {
                        this.addPlaceMarkers(visibleNearbyPlaces);
                    }
                }
            });
        }
    }

    initializeOrUpdateMap(lat, lon) {
        if (!this.map) {
            this.initializeMap(lat, lon);
        } else {
            this.updateMapPosition(lat, lon);
        }
        this.showMap();
    }

    initializeMap(lat, lon) {
        mapboxgl.accessToken = window.MAPBOX_API_KEY;
        
        this.map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/dark-v11',
            center: [lon, lat],
            zoom: 15
        });

        this.userMarker = new mapboxgl.Marker({
            color: "#FF0000"
        })
        .setLngLat([lon, lat])
        .setPopup(new mapboxgl.Popup().setHTML("<b>–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</b>"))
        .addTo(this.map);

        this.map.on('load', () => {
            this.map.resize();
        });
    }

    updateMapPosition(lat, lon) {
        this.map.setCenter([lon, lat]);
        this.userMarker.setLngLat([lon, lat]);
    }

    showMap() {
        document.getElementById('map').style.display = 'block';
    }

    processPlaces(places, userLat, userLon) {
        console.log('Processing places:', {
            placesCount: places?.length,
            userLat,
            userLon
        });
        
        if (!places || !Array.isArray(places)) {
            console.error('Invalid places data:', places);
            this.allPlaces = [];
            return;
        }

        // Calculate distances and add them to each place
        this.allPlaces = places.map(place => {
            if (!place.location || !place.location.coordinates) {
                return { ...place, distance: null };
            }
            
            const [placeLon, placeLat] = place.location.coordinates;
            const distance = this.calculateDistance(userLat, userLon, placeLat, placeLon);
            return { ...place, distance };
        })
        // Sort places by distance
        .sort((a, b) => {
            if (a.distance === null) return 1;
            if (b.distance === null) return -1;
            return a.distance - b.distance;
        });

        // –ö—ç—à–∏—Ä—É–µ–º –º–µ—Å—Ç–∞ –≤ sessionStorage
        sessionStorage.setItem('places', JSON.stringify(this.allPlaces));

        console.log('Processed places with distances:', this.allPlaces);
    }

    calculateDistance(lat1, lon1, lat2, lon2) {
        const R = 6371e3; // Earth's radius in meters
        const œÜ1 = lat1 * Math.PI/180;
        const œÜ2 = lat2 * Math.PI/180;
        const ŒîœÜ = (lat2-lat1) * Math.PI/180;
        const ŒîŒª = (lon2-lon1) * Math.PI/180;

        const a = Math.sin(ŒîœÜ/2) * Math.sin(ŒîœÜ/2) +
                Math.cos(œÜ1) * Math.cos(œÜ2) *
                Math.sin(ŒîŒª/2) * Math.sin(ŒîŒª/2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));

        return Math.round(R * c); // Distance in meters
    }

    displayResults() {
        const resultsDiv = document.getElementById('results');
        
        if (this.allPlaces.length === 0) {
            resultsDiv.innerHTML = "–ú–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã üòû";
            return;
        }

        console.log('Displaying places:', this.allPlaces.map(p => ({ 
            id: p.id, 
            name: p.name,
            distance: p.distance,
            vibe: p.vibe
        })));

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –º–µ—Å—Ç–∞
        const visiblePlaces = this.allPlaces.slice(0, 3);
        const hasMorePlaces = this.allPlaces.length > 3;

        let html = "<h3>–ù–∞–π–¥–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞:</h3>";
        html += visiblePlaces.map((place, index) => this.createPlaceHtml(place, index)).join('');
        resultsDiv.innerHTML = html;
        this.addPlaceMarkers(visiblePlaces);
        this.addPlaceClickHandlers();

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ", –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –º–µ—Å—Ç–∞
        if (hasMorePlaces) {
            html += `
                <button id="showAllBtn" class="show-all-btn">
                    –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ (${this.allPlaces.length})
                </button>
            `;
        }

        resultsDiv.innerHTML = html;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∏–¥–∏–º—ã—Ö –º–µ—Å—Ç
        this.addPlaceMarkers(visiblePlaces);
        this.addPlaceClickHandlers();

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ"
        if (hasMorePlaces) {
            document.getElementById('showAllBtn').addEventListener('click', () => {
                this.showAllPlaces();
            });
        }
    }

    showAllPlaces() {
        const resultsDiv = document.getElementById('results');
        let html = "<h3>–í—Å–µ –º–µ—Å—Ç–∞:</h3>";
        html += this.allPlaces.map((place, index) => this.createPlaceHtml(place, index)).join('');
        resultsDiv.innerHTML = html;
        this.addPlaceMarkers(this.allPlaces);
        this.addPlaceClickHandlers();
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Å—Ç–∞ –≤ sessionStorage
        sessionStorage.setItem('places', JSON.stringify(this.allPlaces));
    }

    addPlaceMarkers(places = this.allPlaces) {
        this.clearPlaceMarkers();
        
        this.placeMarkers = places.map(place => {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–µ—Å—Ç–∞ –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            if (!place.location || !place.location.coordinates) {
                return null;
            }

            const marker = new mapboxgl.Marker()
                .setLngLat([place.location.coordinates[0], place.location.coordinates[1]])
                .setPopup(new mapboxgl.Popup().setHTML(`
                    <b>${place.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</b>
                    <small>${place.type || ''}</small>
                    <small>${place.distance ? `–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${place.distance} –º` : ''}</small>
                    ${place.revew ? `<div>${place.revew}</div>` : ''}
                    <a href="Mapbox/placeDetails.html?id=${place.id}" class="details-btn">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>
                `))
                .addTo(this.map);
            
            marker.placeIndex = this.allPlaces.indexOf(place);
            return marker;
        }).filter(marker => marker !== null);
    }

    createPlaceHtml(place, index) {
        return `
            <div class="place" data-index="${index}">
                <div class="place-content">
                    <strong>${place.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</strong>
                    ${place.type ? `<span class="place-type">${place.type}</span>` : ''}
                    ${place.distance ? `<div class="distance">${place.distance} –º</div>` : ''}
                    ${place.vibe ? `<div class="place-vibe">${place.vibe}</div>` : ''}
                    ${place.revew ? `<div>${place.revew}</div>` : ''}
                    ${place.placephotos ? `
                        <div class="place-photos">
                            ${place.placephotos.split(',').slice(0, 3).map(photo => `
                                <div class="place-photo">
                                    <img src="${photo.trim()}" alt="${place.name}" onerror="this.parentElement.remove()" />
                                </div>
                            `).join('')}
                        </div>
                    ` : ''}
                </div>
                <button class="map-btn" data-index="${index}">
                    <span class="material-icons">map</span>
                </button>
            </div>
        `;
    }

    addPlaceClickHandlers() {
        document.querySelectorAll('.place').forEach(placeEl => {
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ - –ø–µ—Ä–µ—Ö–æ–¥ –≤ –¥–µ—Ç–∞–ª–∏
            placeEl.addEventListener('click', (e) => {
                // –ï—Å–ª–∏ –∫–ª–∏–∫ –±—ã–ª –ø–æ –∫–Ω–æ–ø–∫–µ —Å –∫–∞—Ä—Ç–æ–π, –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–µ—Ç–∞–ª–∏
                if (e.target.closest('.map-btn')) {
                    return;
                }
                
                const index = parseInt(placeEl.getAttribute('data-index'));
                const place = this.allPlaces[index];
                if (place) {
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
                    if (this.userMarker) {
                        const userLngLat = this.userMarker.getLngLat();
                        sessionStorage.setItem('userLocation', JSON.stringify({
                            latitude: userLngLat.lat,
                            longitude: userLngLat.lng
                        }));
                    }
                    window.location.href = `Mapbox/placeDetails.html?id=${place.id}`;
                }
            });
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ —Å –∫–∞—Ä—Ç–æ–π
        document.querySelectorAll('.map-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–æ –∫–∞—Ä—Ç–æ—á–∫–∏
                const index = parseInt(btn.getAttribute('data-index'));
                const marker = this.placeMarkers.find(m => m.placeIndex === index);
                
                if (marker) {
                    marker.togglePopup();
                    this.map.flyTo({
                        center: marker.getLngLat(),
                        zoom: 15
                    });
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if (this.userMarker) {
                        const userLngLat = this.userMarker.getLngLat();
                        sessionStorage.setItem('userLocation', JSON.stringify({
                            latitude: userLngLat.lat,
                            longitude: userLngLat.lng
                        }));
                    }
                    
                    // –°–∫—Ä–æ–ª–ª–∏–º –∫ –∫–∞—Ä—Ç–µ
                    const mapContainer = document.getElementById('map-container');
                    mapContainer.scrollIntoView({ behavior: 'smooth', block: 'start' });
                }
            });
        });
    }

    showLoading() {
        document.getElementById('results').innerHTML = `
            <div class="loading">
                <div class="loader"></div>
                <p>–ò—â–µ–º –º–µ—Å—Ç–∞ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏...</p>
            </div>
        `;
    }

    showError(message) {
        document.getElementById('results').innerHTML = `
            <div class="error">
                –û—à–∏–±–∫–∞: ${message}
            </div>
        `;
        console.error("–û—à–∏–±–∫–∞:", message);
    }

    clearPlaceMarkers() {
        if (this.placeMarkers && this.placeMarkers.length > 0) {
            this.placeMarkers.forEach(marker => {
                if (marker) {
                    marker.remove();
                }
            });
            this.placeMarkers = [];
        }
    }

    async handleGeolocationError(error) {
        console.error('Geolocation error:', error);
        
        if (error.code === error.PERMISSION_DENIED) {
            this.geolocationPermission = 'denied';
            this.showError('–î–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞.');
        } else if (error.code === error.POSITION_UNAVAILABLE) {
            this.showError('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –Ω–∞ –≤–∞—à–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.');
        } else if (error.code === error.TIMEOUT) {
            this.showError('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.');
        } else {
            this.showError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
    }

    showMessage(message) {
        const results = document.getElementById('results');
        const messageDiv = document.createElement('div');
        messageDiv.className = 'message';
        messageDiv.textContent = message;
        results.appendChild(messageDiv);
        
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            messageDiv.remove();
        }, 3000);
    }
}

const app = new FoodFinder(); 