class PlaceDetails {
    constructor() {
        this.map = null;
        this.placeMarker = null;
        this.userMarker = null;
        this.place = null;
        this.placeType = null;
        
        this.initialize();
    }

    async initialize() {
        // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL
        const urlParams = new URLSearchParams(window.location.search);
        const placeId = urlParams.get('placeId');
        const userLat = parseFloat(urlParams.get('userLat'));
        const userLng = parseFloat(urlParams.get('userLng'));
        const placeType = urlParams.get('placeType'); // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –º–µ—Å—Ç–∞

        if (!placeId) {
            this.showError('ID –º–µ—Å—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω');
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –º–µ—Å—Ç–∞
        this.placeType = placeType;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É
        this.initializeMap(userLat, userLng);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ
        await this.loadPlaceDetails(placeId);
    }

    initializeMap(userLat, userLng) {
        const mapElement = document.getElementById('placeMap');
        this.map = new google.maps.Map(mapElement, {
            zoom: 15,
            center: { lat: userLat, lng: userLng },
            disableDefaultUI: true
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (userLat && userLng) {
            const svg = `
                <svg width="40" height="40" viewBox="0 0 40 40" xmlns="http://www.w3.org/2000/svg">
                    <text x="20" y="20" font-size="30" text-anchor="middle" dominant-baseline="middle" fill="red">üìç</text>
                </svg>
            `;
            const encodedSvg = encodeURIComponent(svg).replace(/'/g, '%27').replace(/"/g, '%22');

            this.userMarker = new google.maps.Marker({
                position: { lat: userLat, lng: userLng },
                map: this.map,
                icon: {
                    url: 'data:image/svg+xml;charset=utf-8,' + encodedSvg,
                    scaledSize: new google.maps.Size(40, 40),
                    anchor: new google.maps.Point(20, 20)
                }
            });
        }
    }

    async loadPlaceDetails(placeId) {
        try {
            const request = {
                placeId: placeId,
                fields: [
                    'name',
                    'formatted_address',
                    'formatted_phone_number',
                    'website',
                    'opening_hours',
                    'rating',
                    'user_ratings_total',
                    'photos',
                    'geometry'
                ]
            };

            const placesService = new google.maps.places.PlacesService(this.map);
            const place = await new Promise((resolve, reject) => {
                placesService.getDetails(request, (place, status) => {
                    if (status === google.maps.places.PlacesServiceStatus.OK) {
                        resolve(place);
                    } else {
                        reject(new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${status}`));
                    }
                });
            });

            this.place = place;
            this.displayPlaceDetails();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π –º–µ—Å—Ç–∞:', error);
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ');
        }
    }

    displayPlaceDetails() {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞
        document.getElementById('placeName').textContent = this.place.name;

        // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –º–µ—Å—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç—É
        if (this.place.geometry) {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∂–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–µ—Å—Ç–∞
            let emoji;
            console.log('–û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∂–∏ –¥–ª—è –º–µ—Å—Ç–∞ —Å —Ç–∏–ø–æ–º:', this.placeType);
            
            switch(this.placeType) {
                case 'bar':
                case 'pub':
                    emoji = 'üç∫';
                    break;
                case 'restaurant':
                    emoji = 'üçΩÔ∏è';
                    break;
                case 'cafe':
                    emoji = '‚òï';
                    break;
                case 'night_club':
                    emoji = 'üéâ';
                    break;
                default:
                    emoji = 'üçΩÔ∏è';
            }
            
            console.log('–í—ã–±—Ä–∞–Ω–Ω–æ–µ —ç–º–æ–¥–∂–∏:', emoji);

            const svg = `
                <svg width="40" height="40" viewBox="0 0 40 40" xmlns="http://www.w3.org/2000/svg">
                    <text x="20" y="20" font-size="30" text-anchor="middle" dominant-baseline="middle" fill="black">${emoji}</text>
                </svg>
            `;
            const encodedSvg = encodeURIComponent(svg).replace(/'/g, '%27').replace(/"/g, '%22');

            this.placeMarker = new google.maps.Marker({
                position: this.place.geometry.location,
                map: this.map,
                icon: {
                    url: 'data:image/svg+xml;charset=utf-8,' + encodedSvg,
                    scaledSize: new google.maps.Size(40, 40),
                    anchor: new google.maps.Point(20, 20)
                }
            });

            // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –º–µ—Å—Ç–µ
            this.map.setCenter(this.place.geometry.location);
        }

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        const photosContainer = document.getElementById('placePhotos');
        if (this.place.photos && this.place.photos.length > 0) {
            this.place.photos.forEach(photo => {
                const photoUrl = photo.getUrl({ maxWidth: 400, maxHeight: 300 });
                const photoElement = document.createElement('div');
                photoElement.className = 'place-photo';
                photoElement.innerHTML = `<img src="${photoUrl}" alt="${this.place.name}">`;
                photosContainer.appendChild(photoElement);
            });
        }

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ
        const infoContainer = document.getElementById('placeInfo');
        let infoHTML = `
            <h2>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
            <p><strong>–ê–¥—Ä–µ—Å:</strong> ${this.place.formatted_address}</p>
        `;

        if (this.place.formatted_phone_number) {
            infoHTML += `<p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${this.place.formatted_phone_number}</p>`;
        }

        if (this.place.website) {
            infoHTML += `<p><strong>–°–∞–π—Ç:</strong> <a href="${this.place.website}" target="_blank">${this.place.website}</a></p>`;
        }

        if (this.place.rating) {
            infoHTML += `<p><strong>–†–µ–π—Ç–∏–Ω–≥:</strong> ${this.place.rating} (${this.place.user_ratings_total} –æ—Ç–∑—ã–≤–æ–≤)</p>`;
        }

        if (this.place.opening_hours && this.place.opening_hours.weekday_text) {
            infoHTML += `<p><strong>–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:</strong></p><ul>`;
            this.place.opening_hours.weekday_text.forEach(day => {
                infoHTML += `<li>${day}</li>`;
            });
            infoHTML += `</ul>`;
        }

        infoContainer.innerHTML = infoHTML;
    }

    showError(message) {
        const infoContainer = document.getElementById('placeInfo');
        infoContainer.innerHTML = `
            <div class="error">
                <h2>–û—à–∏–±–∫–∞</h2>
                <p>${message}</p>
            </div>
        `;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ Google Maps API
function initApp() {
    window.placeDetails = new PlaceDetails();
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É Google Maps API
function checkGoogleMapsLoaded() {
    if (typeof google !== 'undefined' && typeof google.maps !== 'undefined') {
        initApp();
    } else {
        setTimeout(checkGoogleMapsLoaded, 100);
    }
}

// –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ API
checkGoogleMapsLoaded(); 