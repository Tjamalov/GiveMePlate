const CONFIG = {
    map: {
        zoom: 15,
        center: { lat: 55.76, lng: 37.64 }, // –ú–æ—Å–∫–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        controls: true
    },
    search: {
        radius: 1000, // –≤ –º–µ—Ç—Ä–∞—Ö
        placeTypes: ['cafe', 'restaurant', 'food', 'bar', 'pub', 'bistro'],
        maxResults: 3
    },
    placeTypes: {
        'cafe': '–ö–∞—Ñ–µ',
        'restaurant': '–†–µ—Å—Ç–æ—Ä–∞–Ω',
        'food': '–§–∞—Å—Ç—Ñ—É–¥',
        'bar': '–ë–∞—Ä',
        'pub': '–ü–∞–±',
        'bistro': '–ë–∏—Å—Ç—Ä–æ'
    }
};

class FoodFinder {
    constructor() {
        console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FoodFinder');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É Google Maps API
        if (typeof google === 'undefined' || typeof google.maps === 'undefined') {
            this.showError("Google Maps API –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ API –∫–ª—é—á.");
            console.error("Google Maps API –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω");
            return;
        }

        this.map = null;
        this.userMarker = null;
        this.placeMarkers = [];
        this.allPlaces = [];
        this.highlightedMarker = null;
        this.placesService = null;
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        const mapElement = document.getElementById('map');
        if (mapElement) {
            mapElement.style.display = 'none';
        }
        
        this.initializeEventListeners();
    }

    initializeEventListeners() {
        console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π');
        
        const findPlacesBtn = document.getElementById('findPlacesBtn');
        const luckyBtn = document.getElementById('luckyBtn');
        const refreshBtn = document.getElementById('refresh-map');
        
        if (findPlacesBtn) {
            findPlacesBtn.addEventListener('click', () => {
                console.log('–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ü–æ–∏—Å–∫"');
                this.findPlaces();
            });
        }
        
        if (luckyBtn) {
            luckyBtn.addEventListener('click', () => {
                console.log('–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ú–Ω–µ –ø–æ–≤–µ–∑—ë—Ç"');
                this.findLuckyPlace();
            });
        }
        
        if (refreshBtn) {
            refreshBtn.addEventListener('click', () => {
                console.log('–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç—É"');
                this.refreshMap();
            });
        }
    }

    initializeMap() {
        console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã');
        
        try {
            const mapElement = document.getElementById('map');
            if (!mapElement) {
                throw new Error('–≠–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            this.map = new google.maps.Map(mapElement, {
                center: CONFIG.map.center,
                zoom: CONFIG.map.zoom,
                disableDefaultUI: !CONFIG.map.controls
            });

            this.placesService = new google.maps.places.PlacesService(this.map);
            console.log('–ö–∞—Ä—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã:', error);
            this.showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á.");
        }
    }

    async findPlaces() {
        if (!navigator.geolocation) {
            this.showError("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º");
            return;
        }

        this.showLoading();

        try {
            console.log('–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é...');
            const position = await this.getCurrentPosition();
            console.log('–ü–æ–ª—É—á–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:', position.coords);
            
            const { latitude, longitude } = position.coords;
            
            if (!latitude || !longitude) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã');
            }
            
            console.log('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç –±—Ä–∞—É–∑–µ—Ä–∞:', { latitude, longitude });
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            if (!this.map) {
                this.initializeMap();
            }
            
            this.updateMapPosition(latitude, longitude);
            await this.searchPlaces(latitude, longitude);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error);
            let errorMessage = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è";
            
            if (error.code === error.PERMISSION_DENIED) {
                errorMessage = "–î–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞.";
            } else if (error.code === error.POSITION_UNAVAILABLE) {
                errorMessage = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞";
            } else if (error.code === error.TIMEOUT) {
                errorMessage = "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ";
            }
            
            this.showError(errorMessage);
        }
    }

    async findLuckyPlace() {
        if (!navigator.geolocation) {
            this.showError("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º");
            return;
        }

        this.showLoading();

        try {
            const position = await this.getCurrentPosition();
            const { latitude, longitude } = position.coords;
            
            console.log('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç –±—Ä–∞—É–∑–µ—Ä–∞:', { latitude, longitude });
            
            this.updateMapPosition(latitude, longitude);
            
            const request = {
                location: new google.maps.LatLng(latitude, longitude),
                radius: 500, // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–¥–∏—É—Å –¥–æ 500 –º–µ—Ç—Ä–æ–≤
                types: ['restaurant', 'cafe', 'bar', 'food', 'meal_takeaway', 'meal_delivery'],
                language: 'ru'
            };

            console.log('–í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫:', request);

            const placesService = new google.maps.places.PlacesService(this.map);
            const results = await new Promise((resolve, reject) => {
                placesService.nearbySearch(request, (results, status) => {
                    if (status === google.maps.places.PlacesServiceStatus.OK) {
                        resolve(results);
                    } else {
                        reject(new Error(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${status}`));
                    }
                });
            });

            console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:', results);
            
            if (!results || results.length === 0) {
                this.showError("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–µ—Å—Ç üòû");
                return;
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞
            const places = results.map(place => {
                try {
                    const coords = {
                        lat: place.geometry.location.lat(),
                        lng: place.geometry.location.lng()
                    };
                    
                    const name = place.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
                    const address = place.vicinity || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω';
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
                    const distance = this.calculateDistance(
                        latitude, longitude,
                        coords.lat, coords.lng
                    );
                    
                    // –ï—Å–ª–∏ –º–µ—Å—Ç–æ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
                    if (distance > 500) {
                        return null;
                    }

                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ types –∏–∑ API
                    const placeType = this.determinePlaceTypeFromTypes(place.types);
                    if (!placeType) {
                        return null;
                    }
                    
                    return {
                        name,
                        address,
                        lat: coords.lat,
                        lng: coords.lng,
                        distance,
                        type: placeType,
                        placeId: place.place_id
                    };
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ—Å—Ç–∞:', error, place);
                    return null;
                }
            }).filter(place => place !== null)
              .sort((a, b) => a.distance - b.distance);

            console.log('–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞:', places);
            
            if (places.length === 0) {
                this.showError("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–µ—Å—Ç üòû");
                return;
            }

            // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –º–µ—Å—Ç–æ
            const randomIndex = Math.floor(Math.random() * places.length);
            const luckyPlace = places[randomIndex];
            
            // –°—Ä–∞–∑—É –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–µ—Ç–∞–ª–µ–π
            this.openPlaceDetails(luckyPlace);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ:', error);
            this.showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–µ—Å—Ç");
        }
    }

    getCurrentPosition() {
        return new Promise((resolve, reject) => {
            console.log('–ó–∞–ø—É—Å–∫ getCurrentPosition...');
            navigator.geolocation.getCurrentPosition(
                (position) => {
                    console.log('–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è:', position);
                    resolve(position);
                },
                (error) => {
                    console.error('–û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error);
                    reject(error);
                },
                {
                    enableHighAccuracy: true,
                    timeout: 10000,
                    maximumAge: 0
                }
            );
        });
    }

    updateMapPosition(lat, lng) {
        if (!this.map) return;
        
        const position = { lat, lng };
        console.log('–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã:', position);
        
        this.map.setCenter(position);
        
        if (this.userMarker) {
            this.userMarker.setPosition(position);
        } else {
            const svg = `
                <svg width="40" height="40" viewBox="0 0 40 40" xmlns="http://www.w3.org/2000/svg">
                    <text x="20" y="20" font-size="30" text-anchor="middle" dominant-baseline="middle" fill="red">üìç</text>
                </svg>
            `;
            const encodedSvg = encodeURIComponent(svg).replace(/'/g, '%27').replace(/"/g, '%22');
            
            this.userMarker = new google.maps.Marker({
                position: position,
                map: this.map,
                title: "–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
                icon: {
                    url: 'data:image/svg+xml;charset=utf-8,' + encodedSvg,
                    scaledSize: new google.maps.Size(40, 40),
                    anchor: new google.maps.Point(20, 20)
                }
            });
        }
    }

    showMap() {
        const mapElement = document.getElementById('map');
        const refreshButton = document.getElementById('refresh-map');
        
        if (mapElement) {
            mapElement.style.display = 'block';
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã
            setTimeout(() => {
                if (this.map) {
                    google.maps.event.trigger(this.map, 'resize');
                }
            }, 100);
        }
        
        if (refreshButton) {
            refreshButton.style.display = 'block';
        }
    }

    async searchPlaces(latitude, longitude) {
        console.log('–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –º–µ—Å—Ç...', { latitude, longitude });
        
        const request = {
            location: new google.maps.LatLng(latitude, longitude),
            radius: CONFIG.search.radius,
            types: ['restaurant', 'cafe', 'bar', 'food', 'meal_takeaway', 'meal_delivery'],
            language: 'ru'
        };

        console.log('–í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫:', request);

        try {
            const placesService = new google.maps.places.PlacesService(this.map);
            const results = await new Promise((resolve, reject) => {
                placesService.nearbySearch(request, (results, status) => {
                    if (status === google.maps.places.PlacesServiceStatus.OK) {
                        resolve(results);
                    } else {
                        reject(new Error(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${status}`));
                    }
                });
            });

            console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:', results);
            
            if (!results || results.length === 0) {
                this.showError("–ú–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏");
                return;
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞
            this.allPlaces = results.map(place => {
                try {
                    console.log('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ—Å—Ç–æ:', place.name, '—Å —Ç–∏–ø–∞–º–∏:', place.types);
                    
                    const coords = {
                        lat: place.geometry.location.lat(),
                        lng: place.geometry.location.lng()
                    };
                    
                    const name = place.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
                    const address = place.vicinity || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω';
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
                    const distance = this.calculateDistance(
                        latitude, longitude,
                        coords.lat, coords.lng
                    );
                    
                    // –ï—Å–ª–∏ –º–µ—Å—Ç–æ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
                    if (distance > CONFIG.search.radius) {
                        console.log('–ú–µ—Å—Ç–æ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
                        return null;
                    }

                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ types –∏–∑ API
                    const placeType = this.determinePlaceTypeFromTypes(place.types);
                    console.log('–û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø –º–µ—Å—Ç–∞:', placeType, '–¥–ª—è', name);
                    
                    if (!placeType) {
                        console.log('–ú–µ—Å—Ç–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
                        return null;
                    }
                    
                    return {
                        name,
                        address,
                        lat: coords.lat,
                        lng: coords.lng,
                        distance,
                        type: placeType,
                        placeId: place.place_id,
                        types: place.types // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã
                    };
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ—Å—Ç–∞:', error, place);
                    return null;
                }
            }).filter(place => place !== null)
              .sort((a, b) => a.distance - b.distance);

            console.log('–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞:', this.allPlaces);
            
            if (this.allPlaces.length === 0) {
                this.showError("–ú–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏");
                return;
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            this.showMap();
            this.displayResults();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ:', error);
            this.showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–µ—Å—Ç");
        }
    }

    determinePlaceType(name) {
        try {
            if (!name) return null;
            
            const lowerName = name.toLowerCase();
            console.log('–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–ª—è:', lowerName);

            for (const [type, label] of Object.entries(CONFIG.placeTypes)) {
                if (lowerName.includes(type) || lowerName.includes(label.toLowerCase())) {
                    console.log('–ù–∞–π–¥–µ–Ω —Ç–∏–ø:', type);
                    return type;
                }
            }
            
            console.log('–¢–∏–ø –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
            return null;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ç–∏–ø–∞:', error);
            return null;
        }
    }

    determinePlaceTypeFromTypes(types) {
        if (!types || !Array.isArray(types)) return null;

        console.log('–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ—Å—Ç–∞ –∏–∑:', types);

        // –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–∏–ø–æ–≤ Google Places –Ω–∞—à–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        const typeMapping = {
            'restaurant': 'restaurant',
            'cafe': 'cafe',
            'bar': 'bar',
            'night_club': 'bar',
            'food': 'food',
            'meal_takeaway': 'food',
            'meal_delivery': 'food',
            'bistro': 'bistro',
            'pub': 'pub'
        };

        // –ò—â–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∏–ø
        for (const type of types) {
            if (typeMapping[type]) {
                console.log('–ù–∞–π–¥–µ–Ω —Ç–∏–ø:', type, '->', typeMapping[type]);
                return typeMapping[type];
            }
        }

        console.log('–¢–∏–ø –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
        return null;
    }

    displayResults() {
        const resultsDiv = document.getElementById('results');
        
        if (this.allPlaces.length === 0) {
            resultsDiv.innerHTML = "–ú–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ üòû";
            return;
        }

        let html = "<h3>–ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Å—Ç–∞:</h3>";
        const visiblePlaces = this.allPlaces.slice(0, CONFIG.search.maxResults);
        html += visiblePlaces.map((place, index) => this.createPlaceHtml(place, index)).join('');
        
        if (this.allPlaces.length > CONFIG.search.maxResults) {
            html += `<div class="show-more">
                <button id="showAllBtn" onclick="app.showAllPlaces()">–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—ë (${this.allPlaces.length})</button>
            </div>`;
        }

        resultsDiv.innerHTML = html;
        // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∏–¥–∏–º—ã—Ö –º–µ—Å—Ç
        this.addPlaceMarkers(visiblePlaces);
        this.addPlaceClickHandlers();
    }

    displayLuckyPlace(place) {
        const resultsDiv = document.getElementById('results');
        resultsDiv.innerHTML = `
            <h3>–í–∞–º –ø–æ–≤–µ–∑–ª–æ! üéâ</h3>
            ${this.createPlaceHtml(place, 0)}
        `;
        
        this.clearPlaceMarkers();
        this.addPlaceMarkers([place]);
        this.addPlaceClickHandlers();
        
        const marker = this.placeMarkers[0];
        if (marker) {
            this.highlightMarker(marker);
        }
    }

    createPlaceHtml(place, index) {
        return `
            <div class="place" data-index="${this.allPlaces.indexOf(place)}">
                <strong>${place.name}</strong>
                ${CONFIG.placeTypes[place.type] ? `<span class="place-type">${CONFIG.placeTypes[place.type]}</span>` : ''}
                <div>${Math.round(place.distance)} –º</div>
                ${place.address || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}
            </div>
        `;
    }

    showAllPlaces() {
        const resultsDiv = document.getElementById('results');
        let html = "<h3>–í—Å–µ –º–µ—Å—Ç–∞:</h3>";
        html += this.allPlaces.map((place, index) => this.createPlaceHtml(place, index)).join('');
        resultsDiv.innerHTML = html;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –≤—Å–µ—Ö –º–µ—Å—Ç
        this.addPlaceMarkers(this.allPlaces);
        this.addPlaceClickHandlers();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ –≤–∏–¥–Ω–∞
        this.showMap();
    }

    addPlaceMarkers(places = this.allPlaces) {
        console.log('–î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –º–µ—Å—Ç:', places.map(p => p.name));
        this.clearPlaceMarkers();
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –º–∞—Å—Å–∏–≤–∞ –º–µ—Å—Ç, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–∞—Ö
        const placesCopy = places.map(place => ({
            ...place,
            originalType: place.type // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–∏–ø
        }));
        
        this.placeMarkers = placesCopy.map(place => {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∂–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–µ—Å—Ç–∞
            let emoji;
            console.log('–û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∂–∏ –¥–ª—è –º–µ—Å—Ç–∞:', place.name, '—Ç–∏–ø:', place.originalType, '—Ç–∏–ø—ã:', place.types);
            
            switch(place.originalType) {
                case 'bar':
                case 'pub':
                    emoji = 'üç∫';
                    break;
                case 'restaurant':
                    emoji = 'üçΩÔ∏è';
                    break;
                case 'cafe':
                    emoji = '‚òï';
                    break;
                case 'night_club':
                    emoji = 'üéâ';
                    break;
                default:
                    emoji = 'üçΩÔ∏è';
            }
            
            console.log('–í—ã–±—Ä–∞–Ω–Ω–æ–µ —ç–º–æ–¥–∂–∏:', emoji, '–¥–ª—è –º–µ—Å—Ç–∞:', place.name);

            const svg = `
                <svg width="40" height="40" viewBox="0 0 40 40" xmlns="http://www.w3.org/2000/svg">
                    <text x="20" y="20" font-size="30" text-anchor="middle" dominant-baseline="middle" fill="black">${emoji}</text>
                </svg>
            `;
            const encodedSvg = encodeURIComponent(svg).replace(/'/g, '%27').replace(/"/g, '%22');

            const marker = new google.maps.Marker({
                position: { lat: place.lat, lng: place.lng },
                map: this.map,
                title: place.name,
                icon: {
                    url: 'data:image/svg+xml;charset=utf-8,' + encodedSvg,
                    scaledSize: new google.maps.Size(40, 40),
                    anchor: new google.maps.Point(20, 20)
                }
            });
            
            marker.addListener('click', () => {
                this.openPlaceDetails(place);
            });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –º–µ—Å—Ç–∞ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –º–∞—Å—Å–∏–≤–µ
            const originalIndex = this.allPlaces.findIndex(p => p.placeId === place.placeId);
            marker.placeIndex = originalIndex;
            return marker;
        });
    }

    addPlaceClickHandlers() {
        document.querySelectorAll('.place').forEach(placeEl => {
            placeEl.addEventListener('click', () => {
                const index = parseInt(placeEl.getAttribute('data-index'));
                const place = this.allPlaces[index];
                this.openPlaceDetails(place);
            });
        });
    }

    openPlaceDetails(place) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userPosition = this.userMarker ? this.userMarker.getPosition() : null;
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–µ—Ç–∞–ª–µ–π
        const url = new URL('place-details.html', window.location.href);
        url.searchParams.set('placeId', place.placeId);
        url.searchParams.set('placeType', place.type);
        
        if (userPosition) {
            url.searchParams.set('userLat', userPosition.lat());
            url.searchParams.set('userLng', userPosition.lng());
        }
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–µ—Ç–∞–ª–µ–π
        window.location.href = url.toString();
    }

    highlightMarker(marker) {
        if (this.highlightedMarker) {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∏–∫–æ–Ω–∫—É
            const place = this.allPlaces[this.highlightedMarker.placeIndex];
            let emoji;
            switch(place.type) {
                case 'bar':
                case 'pub':
                    emoji = 'üç∫';
                    break;
                case 'restaurant':
                    emoji = 'üçΩÔ∏è';
                    break;
                case 'cafe':
                    emoji = '‚òï';
                    break;
                case 'night_club':
                    emoji = 'üéâ';
                    break;
                default:
                    emoji = 'üçΩÔ∏è';
            }

            const svg = `
                <svg width="40" height="40" viewBox="0 0 40 40" xmlns="http://www.w3.org/2000/svg">
                    <text x="20" y="20" font-size="30" text-anchor="middle" dominant-baseline="middle" fill="black">${emoji}</text>
                </svg>
            `;
            const encodedSvg = encodeURIComponent(svg).replace(/'/g, '%27').replace(/"/g, '%22');

            this.highlightedMarker.setIcon({
                url: 'data:image/svg+xml;charset=utf-8,' + encodedSvg,
                scaledSize: new google.maps.Size(40, 40),
                anchor: new google.maps.Point(20, 20)
            });
        }
        
        this.highlightedMarker = marker;
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—É—é –∏–∫–æ–Ω–∫—É
        const place = this.allPlaces[marker.placeIndex];
        let emoji;
        switch(place.type) {
            case 'bar':
            case 'pub':
                emoji = 'üç∫';
                break;
            case 'restaurant':
                emoji = 'üçΩÔ∏è';
                break;
            case 'cafe':
                emoji = '‚òï';
                break;
            case 'night_club':
                emoji = 'üéâ';
                break;
            default:
                emoji = 'üçΩÔ∏è';
        }

        const svg = `
            <svg width="40" height="40" viewBox="0 0 40 40" xmlns="http://www.w3.org/2000/svg">
                <text x="20" y="20" font-size="30" text-anchor="middle" dominant-baseline="middle" fill="red">${emoji}</text>
            </svg>
        `;
        const encodedSvg = encodeURIComponent(svg).replace(/'/g, '%27').replace(/"/g, '%22');

        marker.setIcon({
            url: 'data:image/svg+xml;charset=utf-8,' + encodedSvg,
            scaledSize: new google.maps.Size(40, 40),
            anchor: new google.maps.Point(20, 20)
        });
        this.map.setCenter(marker.getPosition());
        
        document.getElementById('map').scrollIntoView({
            behavior: 'smooth'
        });
    }

    refreshMap() {
        if (this.map) {
            google.maps.event.trigger(this.map, 'resize');
            alert("–ö–∞—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞");
        }
    }

    showLoading() {
        document.getElementById('results').innerHTML = `
            <div class="loading">
                <div class="loader"></div>
                <p>–ò—â–µ–º –º–µ—Å—Ç–∞ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏...</p>
            </div>
        `;
    }

    showError(message) {
        document.getElementById('results').innerHTML = `
            <div class="error">
                –û—à–∏–±–∫–∞: ${message}
            </div>
        `;
        console.error("–û—à–∏–±–∫–∞:", message);
    }

    clearPlaceMarkers() {
        this.placeMarkers.forEach(marker => {
            if (marker) {
                marker.setMap(null);
            }
        });
        this.placeMarkers = [];
        this.highlightedMarker = null;
    }

    calculateDistance(lat1, lon1, lat2, lon2) {
        const R = 6371e3;
        const œÜ1 = lat1 * Math.PI/180;
        const œÜ2 = lat2 * Math.PI/180;
        const ŒîœÜ = (lat2-lat1) * Math.PI/180;
        const ŒîŒª = (lon2-lon1) * Math.PI/180;

        const a = Math.sin(ŒîœÜ/2) * Math.sin(ŒîœÜ/2) +
                  Math.cos(œÜ1) * Math.cos(œÜ2) *
                  Math.sin(ŒîŒª/2) * Math.sin(ŒîŒª/2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));

        return R * c;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ Google Maps API
function initApp() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    window.app = new FoodFinder();
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ Google Maps API
function checkGoogleMapsLoaded() {
    if (typeof google !== 'undefined' && typeof google.maps !== 'undefined') {
        console.log('Google Maps API –∑–∞–≥—Ä—É–∂–µ–Ω');
        initApp();
    } else {
        console.log('–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ Google Maps API...');
        setTimeout(checkGoogleMapsLoaded, 100);
    }
}

// –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ API
checkGoogleMapsLoaded(); 