import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext, MessageHandler, Filters, ConversationHandler
from config import TELEGRAM_BOT_TOKEN, AUTHORIZED_USERS
from supabase_client import supabase
from math import radians, sin, cos, sqrt, atan2
import time
from geopy.geocoders import Nominatim
from geopy.exc import GeocoderTimedOut, GeocoderUnavailable
import signal

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
NAME, VIBE, TYPE, LOCATION, PHOTO, REVIEW, EDIT_ID, EDIT_CONFIRM, EDIT_NAME, EDIT_VIBE, EDIT_TYPE, EDIT_LOCATION, EDIT_PHOTO, EDIT_REVIEW = range(14)

def start(update: Update, context: CallbackContext) -> None:
    """Send a message when the command /start is issued."""
    user_id = update.effective_user.id
    
    if user_id not in AUTHORIZED_USERS:
        update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É. "
        )
        return
    
    show_main_menu(update, context)

def button_handler(update: Update, context: CallbackContext) -> None:
    """Handle button presses."""
    query = update.callback_query
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback query: {query.data}")
    
    if query.data == 'list_places':
        logger.info("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Å—Ç–∞'")
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–∏ –Ω–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ —Å–ø–∏—Å–∫–∞
        context.user_data['places_page'] = 0
        list_places(update, context)
    elif query.data == 'add_place':
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞
        query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞:")
        return NAME
    elif query.data == 'edit_place':
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º ID –º–µ—Å—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –º–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:")
        return EDIT_ID
    elif query.data == 'more_places':
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        context.user_data['places_page'] = context.user_data.get('places_page', 0) + 1
        list_places(update, context)
    elif query.data == 'stop_places':
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        context.user_data.pop('places_page', None)
        show_main_menu(update, context)
    else:
        query.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —á–∞—Å—Ç—å ConversationHandler
    if query.data not in ['add_place', 'edit_place']:
        query.answer()

def show_main_menu(update: Update, context: CallbackContext) -> None:
    """Show the main menu with buttons."""
    keyboard = [
        [InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Å—Ç–∞", callback_data='list_places')],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ", callback_data='add_place')],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ", callback_data='edit_place')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ï—Å–ª–∏ —ç—Ç–æ callback query, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.callback_query:
        update.callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )

def list_places(update: Update, context: CallbackContext) -> None:
    """–ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–µ—Å—Ç."""
    logger.info("–ù–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ list_places")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    user_location = context.user_data.get('user_location')
    logger.info(f"–¢–µ–∫—É—â–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_location}")
    
    if not user_location:
        logger.info("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        message = "–î–ª—è –ø–æ–∫–∞–∑–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Å—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é."
        send_location_request(message, update)
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–µ—Å—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        logger.info("–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–µ—Å—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        response = supabase.table('meal_places').select('*').execute()
        places = response.data
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(places)} –º–µ—Å—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        
        if not places:
            logger.info("–ú–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            if update.callback_query:
                update.callback_query.message.reply_text("–ú–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            else:
                update.message.reply_text("–ú–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Å—Ç–∞ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
        logger.info("–°–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Å—Ç–∞ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é")
        for place in places:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç location
                if isinstance(place['location'], dict) and 'coordinates' in place['location']:
                    # –ï—Å–ª–∏ location –≤ —Ñ–æ—Ä–º–∞—Ç–µ PostGIS —Å coordinates
                    coords = place['location']['coordinates']
                    place['distance'] = calculate_distance(
                        user_location.latitude,
                        user_location.longitude,
                        float(coords[1]),  # latitude
                        float(coords[0])   # longitude
                    )
                else:
                    # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç "POINT(lon lat)"
                    location_str = place['location'].replace('POINT(', '').replace(')', '')
                    lon, lat = map(float, location_str.split())
                    place['distance'] = calculate_distance(
                        user_location.latitude,
                        user_location.longitude,
                        lat,
                        lon
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–µ—Å—Ç–∞ {place.get('name', 'Unknown')}: {str(e)}")
                place['distance'] = float('inf')
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
        places.sort(key=lambda x: x['distance'])
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ 5 –º–µ—Å—Ç
        page_size = 5
        page = context.user_data.get('places_page', 0)
        start_idx = page * page_size
        end_idx = start_idx + page_size
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page_places = places[start_idx:end_idx]
        logger.info(f"–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Å—Ç–∞ —Å {start_idx} –ø–æ {end_idx}")
        
        if not page_places:
            logger.info("–ë–æ–ª—å—à–µ –º–µ—Å—Ç –Ω–µ—Ç")
            if update.callback_query:
                update.callback_query.message.reply_text("–ë–æ–ª—å—à–µ –º–µ—Å—Ç –Ω–µ—Ç.")
            else:
                update.message.reply_text("–ë–æ–ª—å—à–µ –º–µ—Å—Ç –Ω–µ—Ç.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = "üìç –ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Å—Ç–∞:\n\n"
        for place in page_places:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º ID, –ø—Ä–µ–æ–±—Ä–∞–∑—É—è –≤ —Å—Ç—Ä–æ–∫—É
            place_id = str(place.get('id', 'N/A'))
            message += (
                f"ID: {place_id}\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {place['name']}\n"
                f"–í–∞–π–±: {place['vibe']}\n"
                f"–¢–∏–ø: {place['type']}\n"
                f"–ê–¥—Ä–µ—Å: {place['address']}\n"
                f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {place['distance']:.1f} –∫–º\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {place['revew']}\n\n"
            )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = []
        if end_idx < len(places):
            keyboard.append([InlineKeyboardButton("–ï—â—ë", callback_data='more_places')])
        keyboard.append([InlineKeyboardButton("–•–≤–∞—Ç–∏—Ç", callback_data='stop_places')])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ—Å—Ç–∞–º–∏")
        if update.callback_query:
            update.callback_query.message.reply_text(
                message,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            update.message.reply_text(
                message,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–µ—Å—Ç: {str(e)}")
        if update.callback_query:
            update.callback_query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–µ—Å—Ç.")
        else:
            update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–µ—Å—Ç.")

def handle_location(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏."""
    logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    if not update.message or not update.message.location:
        logger.error("–ü–æ–ª—É—á–µ–Ω–∞ –ø—É—Å—Ç–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è")
        update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
        
    user_location = update.message.location
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
    context.user_data['user_location'] = user_location
    logger.info(f"–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {user_location.latitude}, {user_location.longitude}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–∞
    if context.user_data.get('name') or context.user_data.get('vibe') or context.user_data.get('type'):
        logger.info("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Å—Ç–∞
    if context.user_data.get('editing_place') or context.user_data.get('edit_name') or context.user_data.get('edit_vibe') or context.user_data.get('edit_type'):
        logger.info("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
        return
    
    # –ï—Å–ª–∏ —ç—Ç–æ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –º–µ—Å—Ç
    logger.info("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ—Å—Ç")
    list_places(update, context)

def send_location_request(message, update: Update) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏."""
    reply_markup = ReplyKeyboardMarkup(
        [[KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)]],
        one_time_keyboard=True,
        resize_keyboard=True
    )
    if update.callback_query:
        update.callback_query.message.reply_text(message, reply_markup=reply_markup)
    else:
        update.message.reply_text(message, reply_markup=reply_markup)

def add_place_name(update: Update, context: CallbackContext) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–∞–π–±."""
    logger.info("–ù–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ add_place_name")
    name = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞: {name}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    context.user_data['name'] = name
    logger.info("–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –≤–∞–π–±–∞
    keyboard = [
        [InlineKeyboardButton("—Ç—É—Å–æ–≤—ã–π", callback_data='vibe_party'),
        InlineKeyboardButton("–ø–∞–Ω–∫", callback_data='vibe_punk')],
        [InlineKeyboardButton("—Ö–∏–ø—Å—Ç–µ—Ä—Å–∫–∏–π", callback_data='vibe_hipster'),
        InlineKeyboardButton("—Å–µ–º–µ–π–Ω—ã–π", callback_data='vibe_family')],
        [InlineKeyboardButton("–ª–æ–∫–∞–ª—å–Ω—ã–π", callback_data='vibe_local'),
        InlineKeyboardButton("—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π", callback_data='vibe_tourist')],
        [InlineKeyboardButton("–ª–∞–∫—à–µ—Ä–∏", callback_data='vibe_luxury'),
        InlineKeyboardButton("—Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π", callback_data='vibe_romantic')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–∞–π–±
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–π–± –º–µ—Å—Ç–∞:",
        reply_markup=reply_markup
    )
    logger.info("–ó–∞–ø—Ä–æ—à–µ–Ω –≤–∞–π–± –º–µ—Å—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏")
    return VIBE

def add_place_vibe(update: Update, context: CallbackContext) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–π–± –º–µ—Å—Ç–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–ø."""
    logger.info("–ù–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ add_place_vibe")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–∞–π–± –∏–∑ callback_data
    query = update.callback_query
    vibe_map = {
        'vibe_party': '—Ç—É—Å–æ–≤—ã–π',
        'vibe_punk': '–ø–∞–Ω–∫',
        'vibe_hipster': '—Ö–∏–ø—Å—Ç–µ—Ä—Å–∫–∏–π',
        'vibe_family': '—Å–µ–º–µ–π–Ω—ã–π',
        'vibe_local': '–ª–æ–∫–∞–ª—å–Ω—ã–π',
        'vibe_tourist': '—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π',
        'vibe_luxury': '–ª–∞–∫—à–µ—Ä–∏',
        'vibe_romantic': '—Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π'
    }
    
    vibe = vibe_map.get(query.data)
    if not vibe:
        logger.error(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–∞–π–±: {query.data}")
        query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–π–± –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return VIBE
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–∞–π–± –º–µ—Å—Ç–∞: {vibe}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–π–±
    context.user_data['vibe'] = vibe
    logger.info("–í–∞–π–± –º–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Ç–∏–ø–∞ –º–µ—Å—Ç–∞
    keyboard = [
        [InlineKeyboardButton("–±–∞—Ä", callback_data='type_bar'),
        InlineKeyboardButton("–∫–∞—Ñ–µ", callback_data='type_cafe')],
        [InlineKeyboardButton("—Ä–µ—Å—Ç–æ—Ä–∞–Ω", callback_data='type_restaurant'),
        InlineKeyboardButton("–ø–∞–±", callback_data='type_pub')],
        [InlineKeyboardButton("–ø–∏—Ü—Ü–µ—Ä–∏—è", callback_data='type_pizzeria'),
        InlineKeyboardButton("–∫–∞–ª—å—è–Ω–Ω–∞—è", callback_data='type_hookah')],
        [InlineKeyboardButton("–∫–æ—Ñ–µ–π–Ω—è", callback_data='type_coffee')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–ø –º–µ—Å—Ç–∞
    query.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Å—Ç–∞:",
        reply_markup=reply_markup
    )
    logger.info("–ó–∞–ø—Ä–æ—à–µ–Ω —Ç–∏–ø –º–µ—Å—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏")
    return TYPE

def add_place_type(update: Update, context: CallbackContext) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –º–µ—Å—Ç–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é."""
    logger.info("–ù–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ add_place_type")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∏–∑ callback_data
    query = update.callback_query
    type_map = {
        'type_bar': '–±–∞—Ä',
        'type_cafe': '–∫–∞—Ñ–µ',
        'type_restaurant': '—Ä–µ—Å—Ç–æ—Ä–∞–Ω',
        'type_pub': '–ø–∞–±',
        'type_pizzeria': '–ø–∏—Ü—Ü–µ—Ä–∏—è',
        'type_hookah': '–∫–∞–ª—å—è–Ω–Ω–∞—è',
        'type_coffee': '–∫–æ—Ñ–µ–π–Ω—è'
    }
    
    place_type = type_map.get(query.data)
    if not place_type:
        logger.error(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–µ—Å—Ç–∞: {query.data}")
        query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return TYPE
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ç–∏–ø –º–µ—Å—Ç–∞: {place_type}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø
    context.user_data['type'] = place_type
    logger.info("–¢–∏–ø –º–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
    keyboard = [[KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    query.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –º–µ—Å—Ç–∞:",
        reply_markup=reply_markup
    )
    logger.info("–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –º–µ—Å—Ç–∞")
    return LOCATION

def add_place_location(update: Update, context: CallbackContext) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –º–µ—Å—Ç–∞."""
    logger.info("[LOCATION] –ù–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ add_place_location")
    
    if not update.message or not update.message.location:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
        logger.info("[LOCATION] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–µ—Å—Ç–∞")
        context.user_data['waiting_for_place_location'] = True
        message = (
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –º–µ—Å—Ç–∞. "
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ."
        )
        send_location_request(message, update)
        return LOCATION
        
    # –ï—Å–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞
    user_location = update.message.location
    logger.info(f"[LOCATION] –ü–æ–ª—É—á–µ–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–µ—Å—Ç–∞: {user_location.latitude}, {user_location.longitude}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    context.user_data['longitude'] = user_location.longitude
    context.user_data['latitude'] = user_location.latitude
    logger.info(f"[LOCATION] –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: {user_location.longitude}, {user_location.latitude}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å —á–µ—Ä–µ–∑ Nominatim
    logger.info(f"[LOCATION] –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ Nominatim")
    address = get_address_from_coordinates(user_location.latitude, user_location.longitude)
    context.user_data['address'] = address
    logger.info(f"[LOCATION] –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: {address}")
    
    # –û—á–∏—â–∞–µ–º reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –º–µ—Å—Ç–∞.",
        reply_markup=ReplyKeyboardRemove()
    )
    return PHOTO

def sanitize_filename(filename: str) -> str:
    """–û—á–∏—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤."""
    # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—É –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü—É
    translit_map = {
        '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'e',
        '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
        '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
        '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
        '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya',
        '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'G', '–î': 'D', '–ï': 'E', '–Å': 'E',
        '–ñ': 'Zh', '–ó': 'Z', '–ò': 'I', '–ô': 'Y', '–ö': 'K', '–õ': 'L', '–ú': 'M',
        '–ù': 'N', '–û': 'O', '–ü': 'P', '–†': 'R', '–°': 'S', '–¢': 'T', '–£': 'U',
        '–§': 'F', '–•': 'H', '–¶': 'Ts', '–ß': 'Ch', '–®': 'Sh', '–©': 'Sch',
        '–™': '', '–´': 'Y', '–¨': '', '–≠': 'E', '–Æ': 'Yu', '–Ø': 'Ya'
    }
    
    # –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è
    for cyr, lat in translit_map.items():
        filename = filename.replace(cyr, lat)
    
    # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    filename = filename.replace(' ', '_')
    
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, —Ç–æ—á–∫–∏, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –∏ –¥–µ—Ñ–∏—Å—ã
    filename = ''.join(c for c in filename if c.isalnum() or c in '._-')
    
    return filename

def handle_photo(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ."""
    logger.info("–ù–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ handle_photo")
    
    if not update.message or not update.message.photo:
        logger.error("–ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ —Ñ–æ—Ç–æ")
        update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –º–µ—Å—Ç–∞."
        )
        return PHOTO
        
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ —Å –Ω–∞–∏–ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
        photo = update.message.photo[-1]
        file_id = photo.file_id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ Telegram API
        file = context.bot.get_file(file_id)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        temp_path = f"/tmp/{file_id}.jpg"
        file.download(temp_path)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Supabase Storage
        with open(temp_path, 'rb') as f:
            file_data = f.read()
            
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        place_name = sanitize_filename(context.user_data.get('name', 'unknown'))
        file_name = f"place_{place_name}_{int(time.time())}.jpg"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Storage
        response = supabase.storage.from_('photo').upload(
            file_name,
            file_data,
            {'content-type': 'image/jpeg'}
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
        photo_url = supabase.storage.from_('photo').get_public_url(file_name)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['placephotos'] = photo_url
        logger.info(f"–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {photo_url}")
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(temp_path)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞
        logger.info("–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞. "
            "–û–ø–∏—à–∏—Ç–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, —á—Ç–æ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å."
        )
        logger.info("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é REVIEW")
        return REVIEW
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {str(e)}")
        update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        return PHOTO

def add_place_review(update: Update, context: CallbackContext) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    logger.info("–ù–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ add_place_review")
    
    if not update.message or not update.message.text:
        logger.error("–ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞")
        update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞."
        )
        return REVIEW
        
    review = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞: {review}")
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        context.user_data['revew'] = review
        logger.info("–û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ (–±–µ–∑ ID - –æ–Ω –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        place_data = {
            'name': context.user_data.get('name'),
            'vibe': context.user_data.get('vibe'),
            'type': context.user_data.get('type'),
            'address': context.user_data.get('address'),
            'longitude': context.user_data.get('longitude'),
            'latitude': context.user_data.get('latitude'),
            'location': f"POINT({context.user_data.get('longitude')} {context.user_data.get('latitude')})",
            'revew': review,
            'placephotos': context.user_data.get('placephotos')  # –î–æ–±–∞–≤–ª—è–µ–º URL —Ñ–æ—Ç–æ
        }
        
        # –ü—Ä–∏–≤–æ–¥–∏–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∞–º
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ float
            place_data['longitude'] = float(place_data['longitude']) if place_data['longitude'] is not None else None
            place_data['latitude'] = float(place_data['latitude']) if place_data['latitude'] is not None else None
            
            # –£–±–∏—Ä–∞–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
            place_data = {k: v for k, v in place_data.items() if v is not None}
            
            logger.info(f"[DATABASE] –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏: {place_data}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            logger.info(f"[DATABASE] –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:")
            for key, value in place_data.items():
                logger.info(f"[DATABASE] {key}: {type(value).__name__} = {value}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            required_fields = ['name', 'vibe', 'type', 'address', 'longitude', 'latitude', 'location', 'revew']
            missing_fields = [field for field in required_fields if field not in place_data or place_data[field] is None]
            
            if missing_fields:
                logger.error(f"[DATABASE] –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}")
                update.message.reply_text(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {', '.join(missing_fields)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return REVIEW
            
            logger.info(f"[DATABASE] –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            
        except (ValueError, TypeError) as e:
            logger.error(f"[DATABASE] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–∏ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö: {e}")
            update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return REVIEW
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        logger.info("[DATABASE] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Supabase –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–∞")
        response = supabase.table('meal_places').insert(place_data).execute()
        
        logger.info(f"[DATABASE] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Supabase: {response}")
        logger.info(f"[DATABASE] –î–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ: {response.data}")
        
        if not response.data:
            logger.error("[DATABASE] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Å—Ç–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ")
            update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return REVIEW
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID –∏–∑ –æ—Ç–≤–µ—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        inserted_place = response.data[0]
        generated_id = inserted_place.get('id', 'N/A')
        logger.info(f"[DATABASE] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID: {generated_id}")
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        success_message = (
            f"‚úÖ –ú–µ—Å—Ç–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
            f"ID: {generated_id}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {place_data['name']}\n"
            f"–í–∞–π–±: {place_data['vibe']}\n"
            f"–¢–∏–ø: {place_data['type']}\n"
            f"–ê–¥—Ä–µ—Å: {place_data['address']}"
        )
        if place_data.get('placephotos'):
            success_message += f"\n–§–æ—Ç–æ: {place_data['placephotos']}"
        
        logger.info(f"[DATABASE] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ: {success_message}")
        update.message.reply_text(success_message)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        show_main_menu(update, context)
        logger.info("–ü–æ–∫–∞–∑–∞–Ω–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        
        return ConversationHandler.END
            
    except Exception as e:
        logger.error(f"[DATABASE] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Å—Ç–∞: {str(e)}")
        logger.error(f"[DATABASE] –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        logger.error(f"[DATABASE] –ü–æ–ª–Ω—ã–π traceback:", exc_info=True)
        update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return REVIEW

def cancel(update: Update, context: CallbackContext) -> int:
    """Cancel the conversation."""
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ —Å –æ—á–∏—Å—Ç–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    update.message.reply_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=ReplyKeyboardRemove()
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    show_main_menu(update, context)
    
    return ConversationHandler.END

def get_address_from_coordinates(latitude, longitude):
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–¥—Ä–µ—Å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º —á–µ—Ä–µ–∑ Nominatim –∏ –æ–±—Ä–µ–∑–∞–µ—Ç –¥–æ —É–ª–∏—Ü—ã –∏ –¥–æ–º–∞."""
    logger.info(f"[GEOCODING] –ù–∞—á–∞–ª–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {latitude}, {longitude}")
    
    try:
        logger.info(f"[GEOCODING] –°–æ–∑–¥–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ç–æ—Ä Nominatim")
        geolocator = Nominatim(user_agent="VibesAdd_Bot")
        
        logger.info(f"[GEOCODING] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Nominatim")
        location = geolocator.reverse(f"{latitude}, {longitude}")
        
        if location and location.address:
            logger.info(f"[GEOCODING] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Nominatim")
            logger.info(f"[GEOCODING] –ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å: {location.address}")
            logger.info(f"[GEOCODING] –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: {location.raw}")
            
            # –ò—â–µ–º —É–ª–∏—Ü—É –∏ –¥–æ–º –≤ –∞–¥—Ä–µ—Å–µ
            logger.info(f"[GEOCODING] –ò–∑–≤–ª–µ–∫–∞–µ–º —É–ª–∏—Ü—É –∏ –¥–æ–º –∏–∑ –∞–¥—Ä–µ—Å–∞")
            street_address = extract_street_and_house(location.raw)
            
            if street_address:
                logger.info(f"[GEOCODING] –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω –∞–¥—Ä–µ—Å —É–ª–∏—Ü—ã: {street_address}")
                return street_address
            else:
                logger.warning(f"[GEOCODING] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —É–ª–∏—Ü—É –∏ –¥–æ–º –∏–∑ –∞–¥—Ä–µ—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
                fallback_address = f"{latitude}, {longitude}"
                logger.info(f"[GEOCODING] Fallback –∞–¥—Ä–µ—Å: {fallback_address}")
                return fallback_address
        else:
            logger.warning(f"[GEOCODING] –ê–¥—Ä–µ—Å –Ω–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç Nominatim. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
            fallback_address = f"{latitude}, {longitude}"
            logger.info(f"[GEOCODING] Fallback –∞–¥—Ä–µ—Å: {fallback_address}")
            return fallback_address
            
    except (GeocoderTimedOut, GeocoderUnavailable) as e:
        logger.warning(f"[GEOCODING] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ (GeocoderTimedOut/GeocoderUnavailable): {e}")
        fallback_address = f"{latitude}, {longitude}"
        logger.info(f"[GEOCODING] Fallback –∞–¥—Ä–µ—Å: {fallback_address}")
        return fallback_address
    except Exception as e:
        logger.error(f"[GEOCODING] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞: {e}")
        fallback_address = f"{latitude}, {longitude}"
        logger.info(f"[GEOCODING] Fallback –∞–¥—Ä–µ—Å: {fallback_address}")
        return fallback_address

def extract_street_and_house(address_data):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —É–ª–∏—Ü—É –∏ –¥–æ–º –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–∞ Nominatim."""
    logger.info(f"[ADDRESS_PARSING] –ù–∞—á–∞–ª–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —É–ª–∏—Ü—ã –∏ –¥–æ–º–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö: {address_data}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ 'address'
        if 'address' in address_data and isinstance(address_data['address'], dict):
            address_info = address_data['address']
            logger.info(f"[ADDRESS_PARSING] –ù–∞–π–¥–µ–Ω –æ–±—ä–µ–∫—Ç 'address': {address_info}")
            
            # –ò—â–µ–º —É–ª–∏—Ü—É –≤ –æ–±—ä–µ–∫—Ç–µ address
            if 'road' in address_info:
                street = address_info['road']
                house_number = address_info.get('house_number', '')
                
                logger.info(f"[ADDRESS_PARSING] –ù–∞–π–¥–µ–Ω–∞ —É–ª–∏—Ü–∞ 'road': {street}")
                logger.info(f"[ADDRESS_PARSING] –ù–æ–º–µ—Ä –¥–æ–º–∞: {house_number}")
                
                if house_number:
                    result = f"{street}, {house_number}"
                    logger.info(f"[ADDRESS_PARSING] –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                    return result
                else:
                    logger.info(f"[ADDRESS_PARSING] –†–µ–∑—É–ª—å—Ç–∞—Ç (—Ç–æ–ª—å–∫–æ —É–ª–∏—Ü–∞): {street}")
                    return street
                    
            elif 'street' in address_info:
                street = address_info['street']
                house_number = address_info.get('house_number', '')
                
                logger.info(f"[ADDRESS_PARSING] –ù–∞–π–¥–µ–Ω–∞ —É–ª–∏—Ü–∞ 'street': {street}")
                logger.info(f"[ADDRESS_PARSING] –ù–æ–º–µ—Ä –¥–æ–º–∞: {house_number}")
                
                if house_number:
                    result = f"{street}, {house_number}"
                    logger.info(f"[ADDRESS_PARSING] –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                    return result
                else:
                    logger.info(f"[ADDRESS_PARSING] –†–µ–∑—É–ª—å—Ç–∞—Ç (—Ç–æ–ª—å–∫–æ —É–ª–∏—Ü–∞): {street}")
                    return street
            else:
                logger.warning(f"[ADDRESS_PARSING] –£–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ–±—ä–µ–∫—Ç–µ 'address'")
                logger.info(f"[ADDRESS_PARSING] –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏ –≤ 'address': {list(address_info.keys())}")
                
                # –ï—Å–ª–∏ –Ω–µ—Ç —É–ª–∏—Ü—ã, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ –ø–æ—Ö–æ–∂–µ–µ
                for key in ['name', 'amenity', 'building']:
                    if key in address_info:
                        result = address_info[key]
                        logger.info(f"[ADDRESS_PARSING] –ù–∞–π–¥–µ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∫–ª—é—á '{key}': {result}")
                        return result
                
                logger.warning(f"[ADDRESS_PARSING] –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–¥—Ä–µ—Å–∞")
                return None
        else:
            # Fallback: –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∫–æ—Ä–Ω–µ –æ–±—ä–µ–∫—Ç–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            logger.info(f"[ADDRESS_PARSING] –û–±—ä–µ–∫—Ç 'address' –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–µ–Ω—å")
            
            if 'road' in address_data:
                street = address_data['road']
                house_number = address_data.get('house_number', '')
                
                logger.info(f"[ADDRESS_PARSING] –ù–∞–π–¥–µ–Ω–∞ —É–ª–∏—Ü–∞ 'road' –≤ –∫–æ—Ä–Ω–µ: {street}")
                logger.info(f"[ADDRESS_PARSING] –ù–æ–º–µ—Ä –¥–æ–º–∞: {house_number}")
                
                if house_number:
                    result = f"{street}, {house_number}"
                    logger.info(f"[ADDRESS_PARSING] –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                    return result
                else:
                    logger.info(f"[ADDRESS_PARSING] –†–µ–∑—É–ª—å—Ç–∞—Ç (—Ç–æ–ª—å–∫–æ —É–ª–∏—Ü–∞): {street}")
                    return street
                    
            elif 'street' in address_data:
                street = address_data['street']
                house_number = address_data.get('house_number', '')
                
                logger.info(f"[ADDRESS_PARSING] –ù–∞–π–¥–µ–Ω–∞ —É–ª–∏—Ü–∞ 'street' –≤ –∫–æ—Ä–Ω–µ: {street}")
                logger.info(f"[ADDRESS_PARSING] –ù–æ–º–µ—Ä –¥–æ–º–∞: {house_number}")
                
                if house_number:
                    result = f"{street}, {house_number}"
                    logger.info(f"[ADDRESS_PARSING] –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                    return result
                else:
                    logger.info(f"[ADDRESS_PARSING] –†–µ–∑—É–ª—å—Ç–∞—Ç (—Ç–æ–ª—å–∫–æ —É–ª–∏—Ü–∞): {street}")
                    return street
            else:
                logger.warning(f"[ADDRESS_PARSING] –£–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–∞")
                logger.info(f"[ADDRESS_PARSING] –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏: {list(address_data.keys())}")
                
                # –ï—Å–ª–∏ –Ω–µ—Ç —É–ª–∏—Ü—ã, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ –ø–æ—Ö–æ–∂–µ–µ
                for key in ['name', 'amenity', 'building']:
                    if key in address_data:
                        result = address_data[key]
                        logger.info(f"[ADDRESS_PARSING] –ù–∞–π–¥–µ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∫–ª—é—á '{key}': {result}")
                        return result
                
                logger.warning(f"[ADDRESS_PARSING] –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–¥—Ä–µ—Å–∞")
                return None
            
    except Exception as e:
        logger.error(f"[ADDRESS_PARSING] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —É–ª–∏—Ü—ã –∏ –¥–æ–º–∞: {e}")
        return None

def calculate_distance(lat1, lon1, lat2, lon2):
    """Calculate distance between two points in kilometers."""
    R = 6371  # —Ä–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
    
    lat1, lon1, lat2, lon2 = map(radians, [lat1, lon1, lat2, lon2])
    dlat = lat2 - lat1
    dlon = lon2 - lon1
    
    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2
    c = 2 * atan2(sqrt(a), sqrt(1-a))
    distance = R * c
    
    return distance

def find_place_by_id(update: Update, context: CallbackContext) -> int:
    """–ü–æ–∏—Å–∫ –º–µ—Å—Ç–∞ –ø–æ ID –∏ –ø–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
    logger.info("–ù–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ find_place_by_id")
    
    if not update.message or not update.message.text:
        logger.error("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π ID –º–µ—Å—Ç–∞")
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –º–µ—Å—Ç–∞.")
        return EDIT_ID
        
    try:
        place_id = int(update.message.text.strip())
        logger.info(f"–ü–æ–∏—Å–∫ –º–µ—Å—Ç–∞ —Å ID: {place_id}")
        
        # –ò—â–µ–º –º–µ—Å—Ç–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        response = supabase.table('meal_places').select('*').eq('id', place_id).execute()
        
        if not response.data:
            logger.warning(f"–ú–µ—Å—Ç–æ —Å ID {place_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            update.message.reply_text(f"–ú–µ—Å—Ç–æ —Å ID {place_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π ID.")
            return EDIT_ID
        
        place = response.data[0]
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –º–µ—Å—Ç–æ: {place['name']}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ
        place_info = (
            f"üìç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–µ:\n\n"
            f"ID: {place['id']}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {place['name']}\n"
            f"–í–∞–π–±: {place['vibe']}\n"
            f"–¢–∏–ø: {place['type']}\n"
            f"–ê–¥—Ä–µ—Å: {place['address']}"
        )
        if place.get('placephotos'):
            place_info += f"\n–§–æ—Ç–æ: {place['placephotos']}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        context.user_data['editing_place'] = place
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data='edit_confirm_yes')],
            [InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data='edit_confirm_no')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        update.message.reply_text(
            f"{place_info}\n\n"
            f"–•–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ –º–µ—Å—Ç–æ?",
            reply_markup=reply_markup
        )
        
        return EDIT_CONFIRM
        
    except ValueError:
        logger.error("–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID")
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (—á–∏—Å–ª–æ).")
        return EDIT_ID
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–µ—Å—Ç–∞: {str(e)}")
        update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return EDIT_ID

def handle_edit_confirmation(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    query = update.callback_query
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {query.data}")
    
    if query.data == 'edit_confirm_yes':
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ skip
        context.user_data['current_edit_state'] = EDIT_NAME
        
        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–ø—É—Å–∫–∞
        keyboard = [[InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='edit_skip')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞:",
            reply_markup=reply_markup
        )
        
        return EDIT_NAME
    elif query.data == 'edit_confirm_no':
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        context.user_data.pop('editing_place', None)
        context.user_data.pop('current_edit_state', None)
        show_main_menu(update, context)
        return ConversationHandler.END
    
    return EDIT_CONFIRM

def edit_place_name(update: Update, context: CallbackContext) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–∞–π–±."""
    logger.info("–ù–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ edit_place_name")
    name = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞: {name}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    context.user_data['edit_name'] = name
    logger.info("–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ skip
    context.user_data['current_edit_state'] = EDIT_NAME
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –≤–∞–π–±–∞
    keyboard = [
        [InlineKeyboardButton("—Ç—É—Å–æ–≤—ã–π", callback_data='edit_vibe_party'),
        InlineKeyboardButton("–ø–∞–Ω–∫", callback_data='edit_vibe_punk')],
        [InlineKeyboardButton("—Ö–∏–ø—Å—Ç–µ—Ä—Å–∫–∏–π", callback_data='edit_vibe_hipster'),
        InlineKeyboardButton("—Å–µ–º–µ–π–Ω—ã–π", callback_data='edit_vibe_family')],
        [InlineKeyboardButton("–ª–æ–∫–∞–ª—å–Ω—ã–π", callback_data='edit_vibe_local'),
        InlineKeyboardButton("—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π", callback_data='edit_vibe_tourist')],
        [InlineKeyboardButton("–ª–∞–∫—à–µ—Ä–∏", callback_data='edit_vibe_luxury'),
        InlineKeyboardButton("—Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π", callback_data='edit_vibe_romantic')],
        [InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='edit_skip')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–∞–π–±
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –≤–∞–π–± –º–µ—Å—Ç–∞:",
        reply_markup=reply_markup
    )
    
    logger.info("–ó–∞–ø—Ä–æ—à–µ–Ω –Ω–æ–≤—ã–π –≤–∞–π–± –º–µ—Å—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏")
    return EDIT_VIBE

def edit_place_vibe(update: Update, context: CallbackContext) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –≤–∞–π–± –º–µ—Å—Ç–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–ø."""
    logger.info("–ù–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ edit_place_vibe")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–∞–π–± –∏–∑ callback_data
    query = update.callback_query
    vibe_map = {
        'edit_vibe_party': '—Ç—É—Å–æ–≤—ã–π',
        'edit_vibe_punk': '–ø–∞–Ω–∫',
        'edit_vibe_hipster': '—Ö–∏–ø—Å—Ç–µ—Ä—Å–∫–∏–π',
        'edit_vibe_family': '—Å–µ–º–µ–π–Ω—ã–π',
        'edit_vibe_local': '–ª–æ–∫–∞–ª—å–Ω—ã–π',
        'edit_vibe_tourist': '—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π',
        'edit_vibe_luxury': '–ª–∞–∫—à–µ—Ä–∏',
        'edit_vibe_romantic': '—Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π'
    }
    
    vibe = vibe_map.get(query.data)
    if not vibe:
        logger.error(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–∞–π–±: {query.data}")
        query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–π–± –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return EDIT_VIBE
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –≤–∞–π–± –º–µ—Å—Ç–∞: {vibe}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–π–±
    context.user_data['edit_vibe'] = vibe
    logger.info("–ù–æ–≤—ã–π –≤–∞–π–± –º–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ skip
    context.user_data['current_edit_state'] = EDIT_VIBE
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Ç–∏–ø–∞ –º–µ—Å—Ç–∞
    keyboard = [
        [InlineKeyboardButton("–±–∞—Ä", callback_data='edit_type_bar'),
        InlineKeyboardButton("–∫–∞—Ñ–µ", callback_data='edit_type_cafe')],
        [InlineKeyboardButton("—Ä–µ—Å—Ç–æ—Ä–∞–Ω", callback_data='edit_type_restaurant'),
        InlineKeyboardButton("–ø–∞–±", callback_data='edit_type_pub')],
        [InlineKeyboardButton("–ø–∏—Ü—Ü–µ—Ä–∏—è", callback_data='edit_type_pizzeria'),
        InlineKeyboardButton("–∫–∞–ª—å—è–Ω–Ω–∞—è", callback_data='edit_type_hookah')],
        [InlineKeyboardButton("–∫–æ—Ñ–µ–π–Ω—è", callback_data='edit_type_coffee')],
        [InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='edit_skip')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–ø –º–µ—Å—Ç–∞
    query.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø –º–µ—Å—Ç–∞:",
        reply_markup=reply_markup
    )
    
    logger.info("–ó–∞–ø—Ä–æ—à–µ–Ω –Ω–æ–≤—ã–π —Ç–∏–ø –º–µ—Å—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏")
    return EDIT_TYPE

def edit_place_type(update: Update, context: CallbackContext) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–∏–ø –º–µ—Å—Ç–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é."""
    logger.info("–ù–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ edit_place_type")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∏–∑ callback_data
    query = update.callback_query
    type_map = {
        'edit_type_bar': '–±–∞—Ä',
        'edit_type_cafe': '–∫–∞—Ñ–µ',
        'edit_type_restaurant': '—Ä–µ—Å—Ç–æ—Ä–∞–Ω',
        'edit_type_pub': '–ø–∞–±',
        'edit_type_pizzeria': '–ø–∏—Ü—Ü–µ—Ä–∏—è',
        'edit_type_hookah': '–∫–∞–ª—å—è–Ω–Ω–∞—è',
        'edit_type_coffee': '–∫–æ—Ñ–µ–π–Ω—è'
    }
    
    place_type = type_map.get(query.data)
    if not place_type:
        logger.error(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–µ—Å—Ç–∞: {query.data}")
        query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return EDIT_TYPE
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π —Ç–∏–ø –º–µ—Å—Ç–∞: {place_type}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø
    context.user_data['edit_type'] = place_type
    logger.info("–ù–æ–≤—ã–π —Ç–∏–ø –º–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ skip
    context.user_data['current_edit_state'] = EDIT_TYPE
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
    keyboard = [[KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    
    query.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –º–µ—Å—Ç–∞:",
        reply_markup=reply_markup
    )
    
    logger.info("–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –Ω–æ–≤–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –º–µ—Å—Ç–∞")
    return EDIT_LOCATION

def edit_place_location(update: Update, context: CallbackContext) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –º–µ—Å—Ç–∞."""
    logger.info("[EDIT_LOCATION] –ù–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ edit_place_location")
    
    if not update.message or not update.message.location:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
        logger.info("[EDIT_LOCATION] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Å—Ç–∞")
        context.user_data['waiting_for_edit_location'] = True
        message = (
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –º–µ—Å—Ç–∞. "
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ."
        )
        send_location_request(message, update)
        return EDIT_LOCATION
        
    # –ï—Å–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞
    user_location = update.message.location
    logger.info(f"[EDIT_LOCATION] –ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è: {user_location.latitude}, {user_location.longitude}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    context.user_data['edit_longitude'] = user_location.longitude
    context.user_data['edit_latitude'] = user_location.latitude
    logger.info(f"[EDIT_LOCATION] –ù–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {user_location.longitude}, {user_location.latitude}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å —á–µ—Ä–µ–∑ Nominatim
    logger.info(f"[EDIT_LOCATION] –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ Nominatim")
    address = get_address_from_coordinates(user_location.latitude, user_location.longitude)
    context.user_data['edit_address'] = address
    logger.info(f"[EDIT_LOCATION] –ù–æ–≤—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω: {address}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ skip
    context.user_data['current_edit_state'] = EDIT_LOCATION
    
    # –û—á–∏—â–∞–µ–º reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –º–µ—Å—Ç–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–ø—É—Å–∫–∞
    logger.info("[EDIT_LOCATION] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –º–µ—Å—Ç–∞")
    keyboard = [[InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='edit_skip')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –º–µ—Å—Ç–∞.",
        reply_markup=ReplyKeyboardRemove()
    )
    
    return EDIT_PHOTO

def handle_edit_photo(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ."""
    logger.info("–ù–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ handle_edit_photo")
    
    if not update.message or not update.message.photo:
        logger.error("–ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ —Ñ–æ—Ç–æ")
        update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –º–µ—Å—Ç–∞."
        )
        return EDIT_PHOTO
        
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ —Å –Ω–∞–∏–ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
        photo = update.message.photo[-1]
        file_id = photo.file_id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ Telegram API
        file = context.bot.get_file(file_id)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        temp_path = f"/tmp/{file_id}.jpg"
        file.download(temp_path)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Supabase Storage
        with open(temp_path, 'rb') as f:
            file_data = f.read()
            
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        place_name = sanitize_filename(context.user_data.get('edit_name', 'unknown'))
        file_name = f"place_{place_name}_{int(time.time())}.jpg"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Storage
        response = supabase.storage.from_('photo').upload(
            file_name,
            file_data,
            {'content-type': 'image/jpeg'}
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
        photo_url = supabase.storage.from_('photo').get_public_url(file_name)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['edit_placephotos'] = photo_url
        logger.info(f"–ù–æ–≤–æ–µ —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {photo_url}")
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(temp_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ skip
        context.user_data['current_edit_state'] = EDIT_PHOTO
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–ø—É—Å–∫–∞
        logger.info("–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞")
        keyboard = [[InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='edit_skip')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞. "
            "–û–ø–∏—à–∏—Ç–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, —á—Ç–æ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å.",
            reply_markup=reply_markup
        )
        
        logger.info("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é EDIT_REVIEW")
        return EDIT_REVIEW
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ: {str(e)}")
        update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        return EDIT_PHOTO

def edit_place_review(update: Update, context: CallbackContext) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—Ç–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    logger.info("–ù–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ edit_place_review")
    
    if not update.message or not update.message.text:
        logger.error("–ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞")
        update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞."
        )
        return EDIT_REVIEW
        
    review = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞: {review}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ skip
    context.user_data['current_edit_state'] = EDIT_REVIEW
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ –º–µ—Å—Ç–∞
        editing_place = context.user_data.get('editing_place')
        if not editing_place:
            logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–µ—Å—Ç–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            update.message.reply_text("–û—à–∏–±–∫–∞: –º–µ—Å—Ç–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return ConversationHandler.END
        
        place_id = editing_place['id']
        logger.info(f"–û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—Ç–æ —Å ID: {place_id}")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        update_data = {}
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã
        if 'edit_name' in context.user_data:
            update_data['name'] = context.user_data['edit_name']
        if 'edit_vibe' in context.user_data:
            update_data['vibe'] = context.user_data['edit_vibe']
        if 'edit_type' in context.user_data:
            update_data['type'] = context.user_data['edit_type']
        if 'edit_address' in context.user_data:
            update_data['address'] = context.user_data['edit_address']
        if 'edit_longitude' in context.user_data and 'edit_latitude' in context.user_data:
            update_data['longitude'] = float(context.user_data['edit_longitude'])
            update_data['latitude'] = float(context.user_data['edit_latitude'])
            update_data['location'] = f"POINT({context.user_data['edit_longitude']} {context.user_data['edit_latitude']})"
        if 'edit_placephotos' in context.user_data:
            update_data['placephotos'] = context.user_data['edit_placephotos']
        
        # –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        update_data['revew'] = review
        
        logger.info(f"[DATABASE] –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update_data}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—Ç–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        logger.info("[DATABASE] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Supabase –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–∞")
        response = supabase.table('meal_places').update(update_data).eq('id', place_id).execute()
        
        logger.info(f"[DATABASE] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Supabase: {response}")
        
        if not response.data:
            logger.error("[DATABASE] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ—Å—Ç–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ")
            update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return EDIT_REVIEW
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        success_message = (
            f"‚úÖ –ú–µ—Å—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
            f"ID: {place_id}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {update_data.get('name', editing_place['name'])}\n"
            f"–í–∞–π–±: {update_data.get('vibe', editing_place['vibe'])}\n"
            f"–¢–∏–ø: {update_data.get('type', editing_place['type'])}\n"
            f"–ê–¥—Ä–µ—Å: {update_data.get('address', editing_place['address'])}"
        )
        if update_data.get('placephotos'):
            success_message += f"\n–§–æ—Ç–æ: {update_data['placephotos']}"
        
        logger.info(f"[DATABASE] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ: {success_message}")
        update.message.reply_text(success_message)
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        context.user_data.pop('editing_place', None)
        context.user_data.pop('edit_name', None)
        context.user_data.pop('edit_vibe', None)
        context.user_data.pop('edit_type', None)
        context.user_data.pop('edit_address', None)
        context.user_data.pop('edit_longitude', None)
        context.user_data.pop('edit_latitude', None)
        context.user_data.pop('edit_placephotos', None)
        context.user_data.pop('current_edit_state', None)
        show_main_menu(update, context)
        return ConversationHandler.END
            
    except Exception as e:
        logger.error(f"[DATABASE] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ—Å—Ç–∞: {str(e)}")
        logger.error(f"[DATABASE] –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        logger.error(f"[DATABASE] –ü–æ–ª–Ω—ã–π traceback:", exc_info=True)
        update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return EDIT_REVIEW

def skip_button_handler(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è inline-–∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'."""
    logger.info("–ù–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ skip_button_handler")
    
    # –ü–æ–ª—É—á–∞–µ–º callback query
    query = update.callback_query
    query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π update —Å message –∏–∑ callback query
    # –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å skip_edit_step
    if not hasattr(update, 'message') or update.message is None:
        update.message = query.message
    
    # –í—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–ø—É—Å–∫–∞
    return skip_edit_step(update, context)

def skip_edit_step(update: Update, context: CallbackContext) -> int:
    """–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —à–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É."""
    logger.info("–ù–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ skip_edit_step")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_state = context.user_data.get('current_edit_state')
    logger.info(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∞–≥: {current_state}")
    
    if current_state == EDIT_NAME:
        logger.info("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è")
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≤–∞–π–±–∞
        keyboard = [
            [InlineKeyboardButton("—Ç—É—Å–æ–≤—ã–π", callback_data='edit_vibe_party'),
            InlineKeyboardButton("–ø–∞–Ω–∫", callback_data='edit_vibe_punk')],
            [InlineKeyboardButton("—Ö–∏–ø—Å—Ç–µ—Ä—Å–∫–∏–π", callback_data='edit_vibe_hipster'),
            InlineKeyboardButton("—Å–µ–º–µ–π–Ω—ã–π", callback_data='edit_vibe_family')],
            [InlineKeyboardButton("–ª–æ–∫–∞–ª—å–Ω—ã–π", callback_data='edit_vibe_local'),
            InlineKeyboardButton("—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π", callback_data='edit_vibe_tourist')],
            [InlineKeyboardButton("–ª–∞–∫—à–µ—Ä–∏", callback_data='edit_vibe_luxury'),
            InlineKeyboardButton("—Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π", callback_data='edit_vibe_romantic')],
            [InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='edit_skip')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –≤–∞–π–± –º–µ—Å—Ç–∞:",
            reply_markup=reply_markup
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data['current_edit_state'] = EDIT_VIBE
        return EDIT_VIBE
        
    elif current_state == EDIT_VIBE:
        logger.info("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–π–±–∞")
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞
        keyboard = [
            [InlineKeyboardButton("–±–∞—Ä", callback_data='edit_type_bar'),
            InlineKeyboardButton("–∫–∞—Ñ–µ", callback_data='edit_type_cafe')],
            [InlineKeyboardButton("—Ä–µ—Å—Ç–æ—Ä–∞–Ω", callback_data='edit_type_restaurant'),
            InlineKeyboardButton("–ø–∞–±", callback_data='edit_type_pub')],
            [InlineKeyboardButton("–ø–∏—Ü—Ü–µ—Ä–∏—è", callback_data='edit_type_pizzeria'),
            InlineKeyboardButton("–∫–∞–ª—å—è–Ω–Ω–∞—è", callback_data='edit_type_hookah')],
            [InlineKeyboardButton("–∫–æ—Ñ–µ–π–Ω—è", callback_data='edit_type_coffee')],
            [InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='edit_skip')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø –º–µ—Å—Ç–∞:",
            reply_markup=reply_markup
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data['current_edit_state'] = EDIT_TYPE
        return EDIT_TYPE
        
    elif current_state == EDIT_TYPE:
        logger.info("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞")
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ - —Ç–æ–ª—å–∫–æ inline-–∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞
        skip_keyboard = [[InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='edit_skip')]]
        skip_markup = InlineKeyboardMarkup(skip_keyboard)
        
        update.message.reply_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –º–µ—Å—Ç–∞:",
            reply_markup=skip_markup
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data['current_edit_state'] = EDIT_LOCATION
        return EDIT_LOCATION
        
    elif current_state == EDIT_LOCATION:
        logger.info("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏")
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–æ—Ç–æ - —Ç–æ–ª—å–∫–æ inline-–∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞
        skip_keyboard = [[InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='edit_skip')]]
        skip_markup = InlineKeyboardMarkup(skip_keyboard)
        
        update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –º–µ—Å—Ç–∞.",
            reply_markup=skip_markup
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data['current_edit_state'] = EDIT_PHOTO
        return EDIT_PHOTO
        
    elif current_state == EDIT_PHOTO:
        logger.info("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ")
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–∏—Å–∞–Ω–∏—é - —Ç–æ–ª—å–∫–æ inline-–∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞
        skip_keyboard = [[InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='edit_skip')]]
        skip_markup = InlineKeyboardMarkup(skip_keyboard)
        
        update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞. "
            "–û–ø–∏—à–∏—Ç–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, —á—Ç–æ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å.",
            reply_markup=skip_markup
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data['current_edit_state'] = EDIT_REVIEW
        return EDIT_REVIEW
        
    elif current_state == EDIT_REVIEW:
        logger.info("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è")
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - —Å–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π update –¥–ª—è edit_place_review
        if not hasattr(update, 'message') or update.message is None:
            # –ï—Å–ª–∏ update –∏–∑ callback query, —Å–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            class FakeMessage:
                def __init__(self, text):
                    self.text = text
                def reply_text(self, text, **kwargs):
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º query.message –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                    return update.callback_query.message.reply_text(text, **kwargs)
            
            update.message = FakeMessage("")
        
        return edit_place_review(update, context)
    
    else:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞: {current_state}")
        update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return ConversationHandler.END

def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞."""
    if not TELEGRAM_BOT_TOKEN:
        logger.error("No token provided!")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –±–æ—Ç
    pid_file = "/tmp/vibesadd_bot.pid"
    
    if os.path.exists(pid_file):
        with open(pid_file, 'r') as f:
            old_pid = f.read().strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Å —ç—Ç–∏–º PID
        try:
            os.kill(int(old_pid), 0)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
            logger.error(f"–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω —Å PID {old_pid}")
            logger.error("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –Ω–æ–≤–æ–≥–æ")
            return
        except (OSError, ValueError):
            # –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π PID —Ñ–∞–π–ª
            os.remove(pid_file)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º PID —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    with open(pid_file, 'w') as f:
        f.write(str(os.getpid()))
    
    logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å PID {os.getpid()}")
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ PID —Ñ–∞–π–ª–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    def cleanup_pid_file(signum, frame):
        if os.path.exists(pid_file):
            os.remove(pid_file)
        logger.info("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, PID —Ñ–∞–π–ª –æ—á–∏—â–µ–Ω")
        exit(0)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, cleanup_pid_file)   # Ctrl+C
    signal.signal(signal.SIGTERM, cleanup_pid_file)  # kill

    # –°–æ–∑–¥–∞–µ–º Updater –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    updater = Updater(TELEGRAM_BOT_TOKEN)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dispatcher = updater.dispatcher
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    dispatcher.add_handler(CommandHandler("start", start))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–∞
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_handler, pattern='^add_place$')],
        states={
            NAME: [MessageHandler(Filters.text & ~Filters.command, add_place_name)],
            VIBE: [CallbackQueryHandler(add_place_vibe, pattern='^vibe_')],
            TYPE: [CallbackQueryHandler(add_place_type, pattern='^type_')],
            LOCATION: [MessageHandler(Filters.location, add_place_location)],
            PHOTO: [
                MessageHandler(Filters.photo, handle_photo),
            ],
            REVIEW: [
                MessageHandler(Filters.text & ~Filters.command, add_place_review),
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
        per_chat=True,
        per_user=True
    )
    dispatcher.add_handler(conv_handler)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Å—Ç–∞
    edit_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_handler, pattern='^edit_place$')],
        states={
            EDIT_ID: [MessageHandler(Filters.text & ~Filters.command, find_place_by_id)],
            EDIT_CONFIRM: [CallbackQueryHandler(handle_edit_confirmation, pattern='^edit_confirm_')],
            EDIT_NAME: [
                MessageHandler(Filters.text & ~Filters.command, edit_place_name),
                CallbackQueryHandler(skip_button_handler, pattern='^edit_skip$'),
                CommandHandler("skip", skip_edit_step)
            ],
            EDIT_VIBE: [
                CallbackQueryHandler(edit_place_vibe, pattern='^edit_vibe_'),
                CallbackQueryHandler(skip_button_handler, pattern='^edit_skip$'),
                CommandHandler("skip", skip_edit_step)
            ],
            EDIT_TYPE: [
                CallbackQueryHandler(edit_place_type, pattern='^edit_type_'),
                CallbackQueryHandler(skip_button_handler, pattern='^edit_skip$'),
                CommandHandler("skip", skip_edit_step)
            ],
            EDIT_LOCATION: [
                MessageHandler(Filters.location, edit_place_location),
                CallbackQueryHandler(skip_button_handler, pattern='^edit_skip$'),
                CommandHandler("skip", skip_edit_step)
            ],
            EDIT_PHOTO: [
                MessageHandler(Filters.photo, handle_edit_photo),
                CallbackQueryHandler(skip_button_handler, pattern='^edit_skip$'),
                CommandHandler("skip", skip_edit_step)
            ],
            EDIT_REVIEW: [
                MessageHandler(Filters.text & ~Filters.command, edit_place_review),
                CallbackQueryHandler(skip_button_handler, pattern='^edit_skip$'),
                CommandHandler("skip", skip_edit_step)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
        per_chat=True,
        per_user=True
    )
    dispatcher.add_handler(edit_conv_handler)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ (–ø–æ—Å–ª–µ ConversationHandler)
    dispatcher.add_handler(MessageHandler(Filters.location, handle_location))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ ConversationHandler)
    dispatcher.add_handler(CallbackQueryHandler(button_handler))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main() 