import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext, MessageHandler, Filters, ConversationHandler
from config import TELEGRAM_BOT_TOKEN, AUTHORIZED_USERS
from supabase_client import supabase
from math import radians, sin, cos, sqrt, atan2
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('/home/Creogenka/VibesAdd/bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏
proxy_url = "http://127.0.0.1:7890"  # –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø—Ä–æ–∫—Å–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
NAME, VIBE, TYPE, LOCATION, PHOTO, REVIEW = range(6)

def start(update: Update, context: CallbackContext) -> None:
    """Send a message when the command /start is issued."""
    user_id = update.effective_user.id
    
    if user_id not in AUTHORIZED_USERS:
        update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É. "
        )
        return
    
    show_main_menu(update, context)

def button_handler(update: Update, context: CallbackContext) -> None:
    """Handle button presses."""
    query = update.callback_query
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback query: {query.data}")
    
    if query.data == 'list_places':
        logger.info("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Å—Ç–∞'")
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–∏ –Ω–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ —Å–ø–∏—Å–∫–∞
        context.user_data['places_page'] = 0
        list_places(update, context)
    elif query.data == 'add_place':
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞
        query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞:")
        return NAME
    elif query.data == 'more_places':
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        context.user_data['places_page'] = context.user_data.get('places_page', 0) + 1
        list_places(update, context)
    elif query.data == 'stop_places':
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        context.user_data.pop('places_page', None)
        show_main_menu(update, context)
    else:
        query.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —á–∞—Å—Ç—å ConversationHandler
    if query.data != 'add_place':
        query.answer()

def show_main_menu(update: Update, context: CallbackContext) -> None:
    """Show the main menu with buttons."""
    keyboard = [
        [InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Å—Ç–∞", callback_data='list_places')],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ", callback_data='add_place')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ï—Å–ª–∏ —ç—Ç–æ callback query, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.callback_query:
        update.callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )

def list_places(update: Update, context: CallbackContext) -> None:
    """–ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–µ—Å—Ç."""
    logger.info("–ù–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ list_places")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    user_location = context.user_data.get('user_location')
    logger.info(f"–¢–µ–∫—É—â–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_location}")
    
    if not user_location:
        logger.info("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        message = "–î–ª—è –ø–æ–∫–∞–∑–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Å—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é."
        send_location_request(message, update)
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–µ—Å—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        logger.info("–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–µ—Å—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        response = supabase.table('meal_places').select('*').execute()
        places = response.data
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(places)} –º–µ—Å—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        
        if not places:
            logger.info("–ú–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            if update.callback_query:
                update.callback_query.message.reply_text("–ú–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            else:
                update.message.reply_text("–ú–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Å—Ç–∞ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
        logger.info("–°–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Å—Ç–∞ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é")
        for place in places:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç location
                if isinstance(place['location'], dict) and 'coordinates' in place['location']:
                    # –ï—Å–ª–∏ location –≤ —Ñ–æ—Ä–º–∞—Ç–µ PostGIS —Å coordinates
                    coords = place['location']['coordinates']
                    place['distance'] = calculate_distance(
                        user_location.latitude,
                        user_location.longitude,
                        float(coords[1]),  # latitude
                        float(coords[0])   # longitude
                    )
                else:
                    # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç "POINT(lon lat)"
                    location_str = place['location'].replace('POINT(', '').replace(')', '')
                    lon, lat = map(float, location_str.split())
                    place['distance'] = calculate_distance(
                        user_location.latitude,
                        user_location.longitude,
                        lat,
                        lon
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–µ—Å—Ç–∞ {place.get('name', 'Unknown')}: {str(e)}")
                place['distance'] = float('inf')
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
        places.sort(key=lambda x: x['distance'])
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ 5 –º–µ—Å—Ç
        page_size = 5
        page = context.user_data.get('places_page', 0)
        start_idx = page * page_size
        end_idx = start_idx + page_size
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page_places = places[start_idx:end_idx]
        logger.info(f"–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Å—Ç–∞ —Å {start_idx} –ø–æ {end_idx}")
        
        if not page_places:
            logger.info("–ë–æ–ª—å—à–µ –º–µ—Å—Ç –Ω–µ—Ç")
            if update.callback_query:
                update.callback_query.message.reply_text("–ë–æ–ª—å—à–µ –º–µ—Å—Ç –Ω–µ—Ç.")
            else:
                update.message.reply_text("–ë–æ–ª—å—à–µ –º–µ—Å—Ç –Ω–µ—Ç.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = "üìç –ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Å—Ç–∞:\n\n"
        for place in page_places:
            message += (
                f"ID: {place['id']}\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {place['name']}\n"
                f"–í–∞–π–±: {place['vibe']}\n"
                f"–¢–∏–ø: {place['type']}\n"
                f"–ê–¥—Ä–µ—Å: {place['address']}\n"
                f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {place['distance']:.1f} –∫–º\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {place['revew']}\n\n"
            )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = []
        if end_idx < len(places):
            keyboard.append([InlineKeyboardButton("–ï—â—ë", callback_data='more_places')])
        keyboard.append([InlineKeyboardButton("–•–≤–∞—Ç–∏—Ç", callback_data='stop_places')])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ—Å—Ç–∞–º–∏")
        if update.callback_query:
            update.callback_query.message.reply_text(
                message,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            update.message.reply_text(
                message,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–µ—Å—Ç: {str(e)}")
        if update.callback_query:
            update.callback_query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–µ—Å—Ç.")
        else:
            update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–µ—Å—Ç.")

def handle_location(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏."""
    logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    if not update.message or not update.message.location:
        logger.error("–ü–æ–ª—É—á–µ–Ω–∞ –ø—É—Å—Ç–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è")
        update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
        
    user_location = update.message.location
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
    context.user_data['user_location'] = user_location
    logger.info(f"–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {user_location.latitude}, {user_location.longitude}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–∞
    if context.user_data.get('name') or context.user_data.get('vibe') or context.user_data.get('type'):
        logger.info("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
        return
    
    # –ï—Å–ª–∏ —ç—Ç–æ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –º–µ—Å—Ç
    logger.info("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ—Å—Ç")
    list_places(update, context)

def send_location_request(message, update: Update) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏."""
    reply_markup = ReplyKeyboardMarkup(
        [[KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)]],
        one_time_keyboard=True,
        resize_keyboard=True
    )
    if update.callback_query:
        update.callback_query.message.reply_text(message, reply_markup=reply_markup)
    else:
        update.message.reply_text(message, reply_markup=reply_markup)

def add_place_name(update: Update, context: CallbackContext) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–∞–π–±."""
    logger.info("–ù–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ add_place_name")
    name = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞: {name}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    context.user_data['name'] = name
    logger.info("–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –≤–∞–π–±–∞
    keyboard = [
        [InlineKeyboardButton("—Ç—É—Å–æ–≤—ã–π", callback_data='vibe_party'),
        InlineKeyboardButton("–ø–∞–Ω–∫", callback_data='vibe_punk')],
        [InlineKeyboardButton("—Ö–∏–ø—Å—Ç–µ—Ä—Å–∫–∏–π", callback_data='vibe_hipster'),
        InlineKeyboardButton("—Å–µ–º–µ–π–Ω—ã–π", callback_data='vibe_family')],
        [InlineKeyboardButton("–ª–æ–∫–∞–ª—å–Ω—ã–π", callback_data='vibe_local'),
        InlineKeyboardButton("—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π", callback_data='vibe_tourist')],
        [InlineKeyboardButton("–ª–∞–∫—à–µ—Ä–∏", callback_data='vibe_luxury'),
        InlineKeyboardButton("—Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π", callback_data='vibe_romantic')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–∞–π–±
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–π–± –º–µ—Å—Ç–∞:",
        reply_markup=reply_markup
    )
    logger.info("–ó–∞–ø—Ä–æ—à–µ–Ω –≤–∞–π–± –º–µ—Å—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏")
    return VIBE

def add_place_vibe(update: Update, context: CallbackContext) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–π–± –º–µ—Å—Ç–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–ø."""
    logger.info("–ù–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ add_place_vibe")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–∞–π–± –∏–∑ callback_data
    query = update.callback_query
    vibe_map = {
        'vibe_party': '—Ç—É—Å–æ–≤—ã–π',
        'vibe_punk': '–ø–∞–Ω–∫',
        'vibe_hipster': '—Ö–∏–ø—Å—Ç–µ—Ä—Å–∫–∏–π',
        'vibe_family': '—Å–µ–º–µ–π–Ω—ã–π',
        'vibe_local': '–ª–æ–∫–∞–ª—å–Ω—ã–π',
        'vibe_tourist': '—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π',
        'vibe_luxury': '–ª–∞–∫—à–µ—Ä–∏',
        'vibe_romantic': '—Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π'
    }
    
    vibe = vibe_map.get(query.data)
    if not vibe:
        logger.error(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–∞–π–±: {query.data}")
        query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–π–± –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return VIBE
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–∞–π–± –º–µ—Å—Ç–∞: {vibe}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–π–±
    context.user_data['vibe'] = vibe
    logger.info("–í–∞–π–± –º–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Ç–∏–ø–∞ –º–µ—Å—Ç–∞
    keyboard = [
        [InlineKeyboardButton("–±–∞—Ä", callback_data='type_bar'),
        InlineKeyboardButton("–∫–∞—Ñ–µ", callback_data='type_cafe')],
        [InlineKeyboardButton("—Ä–µ—Å—Ç–æ—Ä–∞–Ω", callback_data='type_restaurant'),
        InlineKeyboardButton("–ø–∞–±", callback_data='type_pub')],
        [InlineKeyboardButton("–ø–∏—Ü—Ü–µ—Ä–∏—è", callback_data='type_pizzeria'),
        InlineKeyboardButton("–∫–∞–ª—å—è–Ω–Ω–∞—è", callback_data='type_hookah')],
        [InlineKeyboardButton("–∫–æ—Ñ–µ–π–Ω—è", callback_data='type_coffee')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–ø –º–µ—Å—Ç–∞
    query.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Å—Ç–∞:",
        reply_markup=reply_markup
    )
    logger.info("–ó–∞–ø—Ä–æ—à–µ–Ω —Ç–∏–ø –º–µ—Å—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏")
    return TYPE

def add_place_type(update: Update, context: CallbackContext) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –º–µ—Å—Ç–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é."""
    logger.info("–ù–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ add_place_type")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∏–∑ callback_data
    query = update.callback_query
    type_map = {
        'type_bar': '–±–∞—Ä',
        'type_cafe': '–∫–∞—Ñ–µ',
        'type_restaurant': '—Ä–µ—Å—Ç–æ—Ä–∞–Ω',
        'type_pub': '–ø–∞–±',
        'type_pizzeria': '–ø–∏—Ü—Ü–µ—Ä–∏—è',
        'type_hookah': '–∫–∞–ª—å—è–Ω–Ω–∞—è',
        'type_coffee': '–∫–æ—Ñ–µ–π–Ω—è'
    }
    
    place_type = type_map.get(query.data)
    if not place_type:
        logger.error(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–µ—Å—Ç–∞: {query.data}")
        query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return TYPE
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ç–∏–ø –º–µ—Å—Ç–∞: {place_type}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø
    context.user_data['type'] = place_type
    logger.info("–¢–∏–ø –º–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
    keyboard = [[KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    query.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –º–µ—Å—Ç–∞:",
        reply_markup=reply_markup
    )
    logger.info("–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –º–µ—Å—Ç–∞")
    return LOCATION

def add_place_location(update: Update, context: CallbackContext) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –º–µ—Å—Ç–∞."""
    logger.info("–ù–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ add_place_location")
    
    if not update.message or not update.message.location:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
        logger.info("–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–µ—Å—Ç–∞")
        context.user_data['waiting_for_place_location'] = True
        message = (
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –º–µ—Å—Ç–∞. "
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ."
        )
        send_location_request(message, update)
        return LOCATION
        
    # –ï—Å–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞
    user_location = update.message.location
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–µ—Å—Ç–∞: {user_location.latitude}, {user_location.longitude}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    context.user_data['longitude'] = user_location.longitude
    context.user_data['latitude'] = user_location.latitude
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∏–∑ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    if hasattr(user_location, 'address') and user_location.address:
        context.user_data['address'] = user_location.address
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∞–¥—Ä–µ—Å –∏–∑ Telegram: {user_location.address}")
    else:
        # –ï—Å–ª–∏ –∞–¥—Ä–µ—Å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–∞–∫ –∞–¥—Ä–µ—Å
        context.user_data['address'] = f"{user_location.latitude}, {user_location.longitude}"
        logger.info("–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –º–µ—Å—Ç–∞
    update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –º–µ—Å—Ç–∞."
    )
    return PHOTO

def sanitize_filename(filename: str) -> str:
    """–û—á–∏—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤."""
    # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—É –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü—É
    translit_map = {
        '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'e',
        '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
        '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
        '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
        '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya',
        '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'G', '–î': 'D', '–ï': 'E', '–Å': 'E',
        '–ñ': 'Zh', '–ó': 'Z', '–ò': 'I', '–ô': 'Y', '–ö': 'K', '–õ': 'L', '–ú': 'M',
        '–ù': 'N', '–û': 'O', '–ü': 'P', '–†': 'R', '–°': 'S', '–¢': 'T', '–£': 'U',
        '–§': 'F', '–•': 'H', '–¶': 'Ts', '–ß': 'Ch', '–®': 'Sh', '–©': 'Sch',
        '–™': '', '–´': 'Y', '–¨': '', '–≠': 'E', '–Æ': 'Yu', '–Ø': 'Ya'
    }
    
    # –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è
    for cyr, lat in translit_map.items():
        filename = filename.replace(cyr, lat)
    
    # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    filename = filename.replace(' ', '_')
    
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, —Ç–æ—á–∫–∏, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –∏ –¥–µ—Ñ–∏—Å—ã
    filename = ''.join(c for c in filename if c.isalnum() or c in '._-')
    
    return filename

def handle_photo(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ."""
    logger.info("–ù–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ handle_photo")
    
    if not update.message or not update.message.photo:
        logger.error("–ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ —Ñ–æ—Ç–æ")
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –º–µ—Å—Ç–∞.")
        return PHOTO
        
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ —Å –Ω–∞–∏–ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
        photo = update.message.photo[-1]
        file_id = photo.file_id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ Telegram API
        file = context.bot.get_file(file_id)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        temp_path = f"/tmp/{file_id}.jpg"
        file.download(temp_path)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Supabase Storage
        with open(temp_path, 'rb') as f:
            file_data = f.read()
            
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        place_name = sanitize_filename(context.user_data.get('name', 'unknown'))
        file_name = f"place_{place_name}_{int(time.time())}.jpg"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Storage
        response = supabase.storage.from_('photo').upload(
            file_name,
            file_data,
            {'content-type': 'image/jpeg'}
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
        photo_url = supabase.storage.from_('photo').get_public_url(file_name)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['placephotos'] = photo_url
        logger.info(f"–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {photo_url}")
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(temp_path)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞
        update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞. "
            "–û–ø–∏—à–∏—Ç–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, —á—Ç–æ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å."
        )
        return REVIEW
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {str(e)}")
        update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return PHOTO

def generate_next_id() -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π ID –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–µ—Å—Ç–∞ —Å —É—á–µ—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–∞ (01, 02, ..., 09, 10, 11, ...)."""
    response = supabase.table('meal_places').select('id').execute()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ ID –≤ —á–∏—Å–ª–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏
    existing_ids = []
    for place in response.data:
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π ID –≤ —á–∏—Å–ª–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏
            num_id = int(place['id'])
            existing_ids.append(num_id)
        except ValueError:
            logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID: {place['id']}")
            continue
    
    # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    max_id = max(existing_ids) if existing_ids else 0
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π ID
    next_id = max_id + 1
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º ID –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    if next_id < 10:
        # –î–ª—è —á–∏—Å–µ–ª 1-9 –¥–æ–±–∞–≤–ª—è–µ–º –≤–µ–¥—É—â–∏–π –Ω–æ–ª—å
        return f"0{next_id}"
    else:
        # –î–ª—è —á–∏—Å–µ–ª 10+ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        return str(next_id)

def add_place_review(update: Update, context: CallbackContext) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    logger.info("–ù–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ add_place_review")
    
    if not update.message or not update.message.text:
        logger.error("–ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞")
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞.")
        return REVIEW
        
    review = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞: {review}")
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        context.user_data['revew'] = review
        logger.info("–û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞
        place_data = {
            'id': generate_next_id(),
            'name': context.user_data.get('name'),
            'vibe': context.user_data.get('vibe'),
            'type': context.user_data.get('type'),
            'address': context.user_data.get('address'),
            'longitude': context.user_data.get('longitude'),
            'latitude': context.user_data.get('latitude'),
            'location': f"POINT({context.user_data.get('longitude')} {context.user_data.get('latitude')})",
            'revew': review,
            'placephotos': context.user_data.get('placephotos')  # –î–æ–±–∞–≤–ª—è–µ–º URL —Ñ–æ—Ç–æ
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        logger.info("–î–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        response = supabase.table('meal_places').insert(place_data).execute()
        
        if not response.data:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Å—Ç–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ")
            update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return REVIEW
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        success_message = (
            f"‚úÖ –ú–µ—Å—Ç–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
            f"ID: {place_data['id']}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {place_data['name']}\n"
            f"–í–∞–π–±: {place_data['vibe']}\n"
            f"–¢–∏–ø: {place_data['type']}\n"
            f"–ê–¥—Ä–µ—Å: {place_data['address']}"
        )
        if place_data.get('placephotos'):
            success_message += f"\n–§–æ—Ç–æ: {place_data['placephotos']}"
            
        update.message.reply_text(success_message)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        show_main_menu(update, context)
        logger.info("–ü–æ–∫–∞–∑–∞–Ω–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        
        return ConversationHandler.END
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Å—Ç–∞: {str(e)}")
        update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return REVIEW

def cancel(update: Update, context: CallbackContext) -> int:
    """Cancel the conversation."""
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
    update.message.reply_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    show_main_menu(update, context)
    
    return ConversationHandler.END

def calculate_distance(lat1, lon1, lat2, lon2):
    """Calculate distance between two points in kilometers."""
    R = 6371  # —Ä–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
    
    lat1, lon1, lat2, lon2 = map(radians, [lat1, lon1, lat2, lon2])
    dlat = lat2 - lat1
    dlon = lon2 - lon1
    
    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2
    c = 2 * atan2(sqrt(a), sqrt(1-a))
    distance = R * c
    
    return distance

def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞."""
    if not TELEGRAM_BOT_TOKEN:
        logger.error("No token provided!")
        return

    # –°–æ–∑–¥–∞–µ–º Updater –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    updater = Updater(TELEGRAM_BOT_TOKEN)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dispatcher = updater.dispatcher
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    dispatcher.add_handler(CommandHandler("start", start))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–∞
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_handler, pattern='^add_place$')],
        states={
            NAME: [MessageHandler(Filters.text & ~Filters.command, add_place_name)],
            VIBE: [CallbackQueryHandler(add_place_vibe, pattern='^vibe_')],
            TYPE: [CallbackQueryHandler(add_place_type, pattern='^type_')],
            LOCATION: [MessageHandler(Filters.location, add_place_location)],
            PHOTO: [MessageHandler(Filters.photo, handle_photo)],
            REVIEW: [MessageHandler(Filters.text & ~Filters.command, add_place_review)]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
        per_chat=True,
        per_user=True
    )
    dispatcher.add_handler(conv_handler)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ (–ø–æ—Å–ª–µ ConversationHandler)
    dispatcher.add_handler(MessageHandler(Filters.location, handle_location))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ ConversationHandler)
    dispatcher.add_handler(CallbackQueryHandler(button_handler))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main() 